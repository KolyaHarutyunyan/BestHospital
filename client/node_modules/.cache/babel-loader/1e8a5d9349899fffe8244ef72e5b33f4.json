{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/myProfile/core/changePassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { myProfileFragment } from \"./style\";\nimport { PasswordValidator, ErrorText, Images, Colors } from \"@eachbase/utils\";\nimport { Button } from \"@material-ui/core\";\nimport { MinLoader, PasswordInput } from \"@eachbase/components\";\nimport { authActions } from \"@eachbase/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChangePassword = ({}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [error, setError] = useState('');\n  const [showInputs, setShowInputs] = useState(false);\n  const [inputs, setInputs] = useState(false);\n  const {\n    httpOnSuccess\n  } = useSelector(state => ({\n    httpOnSuccess: state.httpOnSuccess\n  }));\n\n  const handleChange = e => setInputs(prevState => ({ ...prevState,\n    [e.target.name]: e.target.value\n  }), error === e.target.name && setError(''), error === 'confirmationNotEqual' && setError(''));\n\n  const handleChangePassword = () => {\n    const data = {\n      \"password\": inputs.password,\n      \"newPassword\": inputs.newPassword,\n      \"confirmation\": inputs.confirmation\n    };\n\n    if (inputs.password && inputs.newPassword && inputs.confirmation) {\n      if (inputs.newPassword === inputs.confirmation) {\n        dispatch(authActions.changePassword(data));\n      } else {\n        setError('confirmationNotEqual');\n      }\n    } else {\n      !inputs.password ? setError('password') : !inputs.newPassword ? setError('newPassword') : !inputs.confirmation ? setError('confirmation') : '';\n    }\n  };\n\n  const handleCheck = (bool, name) => {\n    if (bool === true) {\n      setError(name);\n    } else {\n      setError(\"\");\n    }\n  };\n\n  const classes = myProfileFragment();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.changePasswordWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.changePasswordContent,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.changePasswordTitle,\n        children: \" Change Password \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), showInputs ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: classes.saveButton,\n          onClick: handleChangePassword,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.cancelButton,\n          onClick: () => setShowInputs(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setShowInputs(true),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: Images.edit,\n          alt: \"edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.changePasswordTextInfo,\n      children: showInputs ? 'Use at least 8 characters, 1 upper case and 1 digit' : 'Use strong password to keep your account secure.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), showInputs && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(PasswordInput, {\n        handleChangePassword: handleChange,\n        type: \"password\",\n        name: \"password\",\n        disabled: false,\n        variant: \"accountPassword\",\n        value: inputs.password,\n        onChange: handleChange,\n        typeError: error === 'password' && ErrorText.field,\n        placeholder: \"Current Password*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PasswordInput, {\n        styles: {\n          marginTop: '6px'\n        },\n        validator: PasswordValidator,\n        sendBoolean: bool => handleCheck(bool, 'newPasswordNotValid'),\n        handleChangePassword: handleChange,\n        type: \"password\",\n        name: \"newPassword\",\n        disabled: false,\n        variant: \"accountPassword\",\n        value: inputs.newPassword,\n        onChange: handleChange,\n        typeError: error === 'newPasswordNotValid' ? ErrorText.passwordValid : error === 'newPassword' && ErrorText.field,\n        placeholder: \"New Password*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PasswordInput, {\n        styles: {\n          marginTop: '6px'\n        },\n        validator: PasswordValidator,\n        sendBoolean: bool => handleCheck(bool, 'confirmationNotValid'),\n        handleChangePassword: handleChange,\n        type: \"password\",\n        name: \"confirmation\",\n        disabled: false,\n        variant: \"accountPassword\",\n        value: inputs.confirmation,\n        onChange: handleChange,\n        typeError: error === 'confirmationNotEqual' ? 'Confirmation not math width New password ' : error === 'confirmationNotValid' ? ErrorText.passwordValid : error === 'confirmation' && ErrorText.field,\n        placeholder: \"Retype New Password*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChangePassword, \"98j5X4F6Wi80tBFKwaCM5XvEFCs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/myProfile/core/changePassword.js"],"names":["React","useState","useDispatch","useSelector","myProfileFragment","PasswordValidator","ErrorText","Images","Colors","Button","MinLoader","PasswordInput","authActions","ChangePassword","dispatch","error","setError","showInputs","setShowInputs","inputs","setInputs","httpOnSuccess","state","handleChange","e","prevState","target","name","value","handleChangePassword","data","password","newPassword","confirmation","changePassword","handleCheck","bool","classes","changePasswordWrapper","changePasswordContent","changePasswordTitle","saveButton","cancelButton","edit","changePasswordTextInfo","marginTop","field","passwordValid"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { myProfileFragment } from \"./style\";\nimport {PasswordValidator, ErrorText, Images, Colors} from \"@eachbase/utils\";\nimport { Button } from \"@material-ui/core\";\nimport {MinLoader, PasswordInput} from \"@eachbase/components\";\nimport {authActions} from \"@eachbase/store\";\n\nexport const ChangePassword = ({}) => {\n    const dispatch = useDispatch()\n    const [error, setError] = useState('')\n    const [showInputs, setShowInputs] = useState(false)\n    const [inputs, setInputs] = useState(false)\n\n\n    const { httpOnSuccess } = useSelector((state) => ({\n        httpOnSuccess: state.httpOnSuccess\n    }));\n\n\n    const handleChange = e => setInputs(prevState =>\n            ({...prevState, [e.target.name]: e.target.value}),\n        error === e.target.name && setError(''),\n        error === 'confirmationNotEqual' && setError('')\n    );\n\n    const handleChangePassword = () => {\n        const data = {\n            \"password\": inputs.password,\n            \"newPassword\": inputs.newPassword,\n            \"confirmation\": inputs.confirmation,\n        }\n        if (inputs.password && inputs.newPassword && inputs.confirmation) {\n            if (inputs.newPassword === inputs.confirmation) {\n                dispatch(authActions.changePassword(data))\n            } else {\n                setError('confirmationNotEqual')\n            }\n        } else {\n            !inputs.password ? setError('password') :\n                !inputs.newPassword ? setError('newPassword') :\n                    !inputs.confirmation ? setError('confirmation') : ''\n        }\n    }\n    const handleCheck = (bool, name) => {\n        if (bool === true) {\n            setError(name);\n        } else {\n            setError(\"\");\n        }\n    };\n\n\n\n    const classes = myProfileFragment()\n    return (\n        <div className={classes.changePasswordWrapper}>\n            <div className={classes.changePasswordContent}>\n                <p className={classes.changePasswordTitle}> Change Password </p>\n\n                {showInputs ?\n                    <div>\n                        <Button className={classes.saveButton} onClick={handleChangePassword}>Save</Button>\n                        <Button className={classes.cancelButton} onClick={() => setShowInputs(false)}>Cancel</Button>\n                    </div>\n                    :\n                    <div onClick={() => setShowInputs(true)}>\n                        <img src={Images.edit} alt=\"edit\"/>\n                        <p>Edit</p>\n                    </div>\n                }\n            </div>\n\n            <p className={classes.changePasswordTextInfo}>\n                {showInputs ?\n                    'Use at least 8 characters, 1 upper case and 1 digit'\n                    :\n                    'Use strong password to keep your account secure.'\n                }\n            </p>\n            {showInputs &&\n            <div style={{marginTop: '16px'}}>\n                <PasswordInput\n                    handleChangePassword={handleChange}\n                    type={\"password\"}\n                    name={\"password\"}\n                    disabled={false}\n                    variant={\"accountPassword\"}\n                    value={inputs.password}\n                    onChange={handleChange}\n                    typeError={error === 'password' && ErrorText.field}\n                    placeholder={\"Current Password*\"}\n                />\n                <PasswordInput\n                    styles={{marginTop:'6px'}}\n                    validator={PasswordValidator}\n                    sendBoolean={(bool) => handleCheck(bool, 'newPasswordNotValid')}\n                    handleChangePassword={handleChange}\n                    type={\"password\"}\n                    name={\"newPassword\"}\n                    disabled={false}\n                    variant={\"accountPassword\"}\n                    value={inputs.newPassword}\n                    onChange={handleChange}\n                    typeError={\n                        error === 'newPasswordNotValid' ? ErrorText.passwordValid :\n                            error === 'newPassword' && ErrorText.field\n                    }\n                    placeholder={\"New Password*\"}\n                />\n                <PasswordInput\n                    styles={{marginTop:'6px'}}\n                    validator={PasswordValidator}\n                    sendBoolean={(bool) => handleCheck(bool, 'confirmationNotValid')}\n                    handleChangePassword={handleChange}\n                    type={\"password\"}\n                    name={\"confirmation\"}\n                    disabled={false}\n                    variant={\"accountPassword\"}\n                    value={inputs.confirmation}\n                    onChange={handleChange}\n                    typeError={\n                        error === 'confirmationNotEqual' ? 'Confirmation not math width New password ' :\n                            error === 'confirmationNotValid' ? ErrorText.passwordValid :\n                                error === 'confirmation' && ErrorText.field\n                    }\n                    placeholder={\"Retype New Password*\"}\n                />\n            </div>\n            }\n\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}