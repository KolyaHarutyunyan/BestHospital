{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/branches/createBranch/core/createBranchInputs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createOfficeStyle } from \"./styles\";\nimport { EmailValidator, useGlobalStyles, useGlobalText, createInputsWrapper, ErrorText, CountryList } from \"@eachbase/utils\";\nimport { AddressInput, CreateChancel, SelectInput, ValidationInput } from \"@eachbase/components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fundingSourceActions, officeActions } from \"@eachbase/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CreateBranchInputs = ({\n  handleChangeName\n}) => {\n  _s();\n\n  const globalStyle = useGlobalText();\n  const globalInputs = useGlobalStyles();\n  const globalScreens = createInputsWrapper();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [fullAddress, setFullAddress] = useState('');\n  const [error, setError] = useState('');\n  const [phone, setPhone] = useState('');\n  const [inputs, setInputs] = useState({});\n  const {\n    officesListReserve\n  } = useSelector(state => ({\n    officesListReserve: state.offices.officesListReserve\n  }));\n\n  const handleChange = e => setInputs(prevState => ({ ...prevState,\n    [e.target.name]: e.target.value\n  }), error === e.target.name && setError(''), e.target.name === 'name' && handleChangeName(e.target.value));\n\n  const handleCheck = bool => {\n    if (bool === true) {\n      setError(\"Not valid email\");\n    } else {\n      setError('');\n    }\n  };\n\n  const handleChangePhone = ev => {\n    if (ev.target.value.length <= 11) {\n      setPhone(ev.target.value);\n      error === 'phone' && setError('');\n    }\n  };\n\n  const handleCreate = () => {\n    const data = {\n      \"name\": inputs.name,\n      \"officeId\": inputs.officeName,\n      \"email\": inputs.email,\n      \"phoneNumber\": phone,\n      \"establishedDate\": new Date(inputs.date).getTime(),\n      \"address\": fullAddress\n    };\n\n    if (inputs.name && inputs.officeName && inputs.email && phone && inputs.date && fullAddress) {// dispatch(fundingSourceActions.createFundingSource(data))\n    } else {\n      setError(!inputs.name ? 'name' : !inputs.officeName ? 'officeName' : !inputs.email ? 'email' : !phone ? 'phone' : !inputs.date ? 'date' : 'Input is not field');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: globalScreens.createInputsWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: globalStyle.title,\n      children: \"Branch Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: globalScreens.basicInfo,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: globalStyle.smallText,\n        children: \"Basic Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: globalScreens.basicInfoInputs,\n        children: [/*#__PURE__*/_jsxDEV(ValidationInput, {\n          style: globalInputs.simpleInput,\n          variant: \"outlined\",\n          name: \"name\",\n          type: \"text\",\n          label: \"Name*\",\n          typeError: error === 'name' ? ErrorText.field : '',\n          onChange: handleChange,\n          value: inputs.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SelectInput, {\n          style: globalInputs.simpleInput,\n          name: \"officeName\",\n          label: \"Office Name\",\n          handleSelect: handleChange,\n          value: inputs.officeName,\n          list: officesListReserve,\n          typeError: error === 'officeName' ? ErrorText.field : '',\n          type: 'id'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n          style: globalInputs.simpleInput,\n          validator: EmailValidator,\n          variant: \"outlined\",\n          name: \"email\",\n          type: \"email\",\n          label: \"Email Address*\",\n          typeError: error === 'email' ? ErrorText.field : error === 'Not valid email' ? 'Not valid email' : '',\n          sendBoolean: handleCheck,\n          onChange: handleChange,\n          value: inputs.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n          style: globalInputs.simpleInput,\n          variant: \"outlined\",\n          name: \"phone\",\n          label: \"Phone Number*\",\n          type: 'number',\n          typeError: error === 'phone' ? ErrorText.field : '',\n          onChange: handleChangePhone,\n          value: phone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n          variant: \"outlined\",\n          name: \"date\",\n          type: \"date\",\n          typeError: error === 'date' ? ErrorText.field : '',\n          label: \"Establishment Date*\",\n          onChange: handleChange,\n          value: inputs.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: globalScreens.basicInfo,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: globalStyle.smallText,\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: globalScreens.basicInfoInputs,\n        children: /*#__PURE__*/_jsxDEV(AddressInput, {\n          handleSelectValue: setFullAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error === 'Input is not field' ? error : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateChancel, {\n      classes: globalInputs.buttonsStyle,\n      create: \"Create\",\n      chancel: \"Cancel\",\n      onCreate: handleCreate,\n      onClose: () => history.push('/fundingSource')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateBranchInputs, \"pAWel4EOPHtuP8S0zapQpkUtJPI=\", false, function () {\n  return [useGlobalText, useGlobalStyles, useDispatch, useHistory, useSelector];\n});\n\n_c = CreateBranchInputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateBranchInputs\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/branches/createBranch/core/createBranchInputs.js"],"names":["React","useState","useHistory","createOfficeStyle","EmailValidator","useGlobalStyles","useGlobalText","createInputsWrapper","ErrorText","CountryList","AddressInput","CreateChancel","SelectInput","ValidationInput","useDispatch","useSelector","fundingSourceActions","officeActions","CreateBranchInputs","handleChangeName","globalStyle","globalInputs","globalScreens","dispatch","history","fullAddress","setFullAddress","error","setError","phone","setPhone","inputs","setInputs","officesListReserve","state","offices","handleChange","e","prevState","target","name","value","handleCheck","bool","handleChangePhone","ev","length","handleCreate","data","officeName","email","Date","date","getTime","title","basicInfo","smallText","basicInfoInputs","simpleInput","field","buttonsStyle","push"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createOfficeStyle } from \"./styles\";\nimport {\n  EmailValidator,\n  useGlobalStyles,\n  useGlobalText,\n  createInputsWrapper, ErrorText, CountryList\n} from \"@eachbase/utils\";\nimport { AddressInput, CreateChancel, SelectInput, ValidationInput } from \"@eachbase/components\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fundingSourceActions, officeActions} from \"@eachbase/store\";\n\nexport const CreateBranchInputs = ({ handleChangeName }) => {\n  const globalStyle = useGlobalText();\n  const globalInputs = useGlobalStyles();\n  const globalScreens = createInputsWrapper()\n  const dispatch = useDispatch()\n  const history = useHistory();\n  const [fullAddress, setFullAddress] =useState('')\n  const [error, setError] =useState('')\n  const [phone, setPhone] =useState('')\n  const [inputs, setInputs] = useState({});\n\n  const { officesListReserve } = useSelector((state) => ({\n    officesListReserve: state.offices.officesListReserve\n  }));\n\n  const handleChange = e => setInputs(prevState =>\n      ({ ...prevState, [e.target.name]: e.target.value }),\n      error === e.target.name && setError(''),\n      e.target.name === 'name' && handleChangeName(e.target.value)\n  );\n  const handleCheck = (bool) => {\n    if (bool === true) {\n      setError(\"Not valid email\");\n    } else {\n      setError('');\n    }\n  };\n\n  const handleChangePhone =(ev) =>{\n    if(ev.target.value.length <= 11){\n      setPhone(ev.target.value)\n      error === 'phone' && setError('')\n    }\n  }\n\n  const handleCreate =()=> {\n    const data ={\n      \"name\": inputs.name,\n      \"officeId\": inputs.officeName,\n      \"email\": inputs.email,\n      \"phoneNumber\": phone,\n      \"establishedDate\": new Date(inputs.date).getTime(),\n      \"address\": fullAddress\n    }\n    if(inputs.name && inputs.officeName && inputs.email && phone && inputs.date && fullAddress){\n       // dispatch(fundingSourceActions.createFundingSource(data))\n    }\n    else{\n      setError(\n         !inputs.name ? 'name' :\n                !inputs.officeName ? 'officeName' :\n                 !inputs.email ? 'email' :\n                  !phone ? 'phone' :\n                    !inputs.date ? 'date' :\n                   'Input is not field'\n      )\n    }\n  }\n\n  return (\n    <div className={globalScreens.createInputsWrapper}>\n      <p className={globalStyle.title}>Branch Information</p>\n\n      <div className={globalScreens.basicInfo}>\n        <p className={globalStyle.smallText}>Basic Information</p>\n        <div className={globalScreens.basicInfoInputs}>\n\n          <ValidationInput\n            style={globalInputs.simpleInput}\n            variant={\"outlined\"}\n            name={\"name\"}\n            type={\"text\"}\n            label={\"Name*\"}\n            typeError={error === 'name' ? ErrorText.field : ''}\n            onChange={ handleChange }\n            value={ inputs.name }\n          />\n\n          <SelectInput\n            style={globalInputs.simpleInput}\n            name={\"officeName\"}\n            label={\"Office Name\"}\n            handleSelect={ handleChange }\n            value={ inputs.officeName }\n            list={ officesListReserve }\n            typeError={error === 'officeName' ? ErrorText.field : ''}\n            type={'id'}\n\n          />\n\n          <ValidationInput\n            style={globalInputs.simpleInput}\n            validator={EmailValidator}\n            variant={\"outlined\"}\n            name={\"email\"}\n            type={\"email\"}\n            label={\"Email Address*\"}\n            typeError={error === 'email' ? ErrorText.field : error === 'Not valid email' ?  'Not valid email' : ''}\n            sendBoolean={ handleCheck }\n            onChange={ handleChange }\n            value={ inputs.email }\n          />\n\n          <ValidationInput\n            style={globalInputs.simpleInput}\n            variant={\"outlined\"}\n            name={\"phone\"}\n            label={\"Phone Number*\"}\n            type={'number'}\n            typeError={ error === 'phone' ? ErrorText.field : ''}\n            onChange={ handleChangePhone }\n            value={ phone }\n          />\n\n          <ValidationInput\n              variant={\"outlined\"}\n              name={\"date\"}\n              type={\"date\"}\n              typeError={ error === 'date' ? ErrorText.field : '' }\n              label={\"Establishment Date*\"}\n              onChange={ handleChange }\n              value={ inputs.date }\n          />\n\n\n        </div>\n      </div>\n\n      <div className={globalScreens.basicInfo}>\n        <p className={globalStyle.smallText}>Address</p>\n\n        <div className={globalScreens.basicInfoInputs}>\n          <AddressInput\n            handleSelectValue={setFullAddress}\n          />\n        </div>\n\n      </div>\n      <p>{error === 'Input is not field' ? error : ''}</p>\n      <CreateChancel\n        classes={globalInputs.buttonsStyle}\n        create={\"Create\"}\n        chancel={\"Cancel\"}\n        onCreate={ handleCreate }\n        onClose={  () => history.push('/fundingSource')}\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}