{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { authService } from \"./fundingSource.service\";\nimport { CREATE_FUNDING_SOURCE, GET_FUNDING_SOURCE, GET_FUNDING_SOURCE_SUCCESS } from \"./fundingSource.types\";\nimport { httpRequestsOnErrorsActions } from \"../http_requests_on_errors\";\nimport { httpRequestsOnLoadActions } from \"../http_requests_on_load\";\n\nfunction* createFundingSource(action) {\n  alert(1);\n\n  try {\n    const res = yield call(authService.createFundingSourceService, action.payload.body);\n    window.location.replace('/fundingSource');\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getFundingSource({\n  action,\n  type\n}) {\n  yield put(httpRequestsOnErrorsActions.removeError(type));\n  yield put(httpRequestsOnLoadActions.appendLoading(type));\n\n  try {\n    const res = yield call(authService.getFundingSourceService);\n    yield put({\n      type: GET_FUNDING_SOURCE_SUCCESS,\n      payload: res.data\n    });\n    yield put(httpRequestsOnLoadActions.removeLoading(type));\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n  } catch (err) {\n    yield put(httpRequestsOnLoadActions.removeLoading(type));\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n    console.log(err);\n  }\n}\n\nexport const watchFundingSource = function* watchFundingSourceSaga() {\n  yield takeLatest(CREATE_FUNDING_SOURCE, createFundingSource);\n  yield takeLatest(GET_FUNDING_SOURCE, getFundingSource);\n};","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/store/fundingSource/fundingSource.saga.js"],"names":["call","put","takeLatest","authService","CREATE_FUNDING_SOURCE","GET_FUNDING_SOURCE","GET_FUNDING_SOURCE_SUCCESS","httpRequestsOnErrorsActions","httpRequestsOnLoadActions","createFundingSource","action","alert","res","createFundingSourceService","payload","body","window","location","replace","err","console","log","getFundingSource","type","removeError","appendLoading","getFundingSourceService","data","removeLoading","watchFundingSource","watchFundingSourceSaga"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,SACIC,qBADJ,EAEIC,kBAFJ,EAGIC,0BAHJ,QAIO,uBAJP;AAKA,SAAQC,2BAAR,QAA0C,4BAA1C;AACA,SAAQC,yBAAR,QAAwC,0BAAxC;;AAEA,UAAUC,mBAAV,CAA8BC,MAA9B,EAAsC;AAClCC,EAAAA,KAAK,CAAC,CAAD,CAAL;;AACA,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACG,WAAW,CAACU,0BAAb,EAAyCH,MAAM,CAACI,OAAP,CAAeC,IAAxD,CAAtB;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,gBAAxB;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;;AAED,UAAUG,gBAAV,CAA2B;AAACZ,EAAAA,MAAD;AAASa,EAAAA;AAAT,CAA3B,EAA2C;AACvC,QAAMtB,GAAG,CAACM,2BAA2B,CAACiB,WAA5B,CAAwCD,IAAxC,CAAD,CAAT;AACA,QAAMtB,GAAG,CAACO,yBAAyB,CAACiB,aAA1B,CAAwCF,IAAxC,CAAD,CAAT;;AACA,MAAI;AACA,UAAMX,GAAG,GAAG,MAAMZ,IAAI,CAACG,WAAW,CAACuB,uBAAb,CAAtB;AACA,UAAMzB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEjB,0BADA;AAENQ,MAAAA,OAAO,EAAEF,GAAG,CAACe;AAFP,KAAD,CAAT;AAIA,UAAM1B,GAAG,CAACO,yBAAyB,CAACoB,aAA1B,CAAwCL,IAAxC,CAAD,CAAT;AACA,UAAMtB,GAAG,CAACM,2BAA2B,CAACiB,WAA5B,CAAwCD,IAAxC,CAAD,CAAT;AAGH,GAVD,CAUE,OAAOJ,GAAP,EAAY;AACV,UAAMlB,GAAG,CAACO,yBAAyB,CAACoB,aAA1B,CAAwCL,IAAxC,CAAD,CAAT;AACA,UAAMtB,GAAG,CAACM,2BAA2B,CAACiB,WAA5B,CAAwCD,IAAxC,CAAD,CAAT;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;;AAGD,OAAO,MAAMU,kBAAkB,GAAG,UAAUC,sBAAV,GAAmC;AACjE,QAAM5B,UAAU,CAACE,qBAAD,EAAwBK,mBAAxB,CAAhB;AACA,QAAMP,UAAU,CAACG,kBAAD,EAAqBiB,gBAArB,CAAhB;AACH,CAHM","sourcesContent":["import {call, put, takeLatest} from \"redux-saga/effects\";\nimport {authService} from \"./fundingSource.service\";\nimport {\n    CREATE_FUNDING_SOURCE,\n    GET_FUNDING_SOURCE,\n    GET_FUNDING_SOURCE_SUCCESS,\n} from \"./fundingSource.types\";\nimport {httpRequestsOnErrorsActions} from \"../http_requests_on_errors\";\nimport {httpRequestsOnLoadActions} from \"../http_requests_on_load\";\n\nfunction* createFundingSource(action) {\n    alert(1)\n    try {\n        const res = yield call(authService.createFundingSourceService, action.payload.body);\n        window.location.replace('/fundingSource')\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nfunction* getFundingSource({action, type}) {\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n    yield put(httpRequestsOnLoadActions.appendLoading(type));\n    try {\n        const res = yield call(authService.getFundingSourceService);\n        yield put({\n            type: GET_FUNDING_SOURCE_SUCCESS,\n            payload: res.data,\n        });\n        yield put(httpRequestsOnLoadActions.removeLoading(type));\n        yield put(httpRequestsOnErrorsActions.removeError(type));\n\n\n    } catch (err) {\n        yield put(httpRequestsOnLoadActions.removeLoading(type));\n        yield put(httpRequestsOnErrorsActions.removeError(type));\n        console.log(err)\n    }\n}\n\n\nexport const watchFundingSource = function* watchFundingSourceSaga() {\n    yield takeLatest(CREATE_FUNDING_SOURCE, createFundingSource);\n    yield takeLatest(GET_FUNDING_SOURCE, getFundingSource);\n};\n"]},"metadata":{},"sourceType":"module"}