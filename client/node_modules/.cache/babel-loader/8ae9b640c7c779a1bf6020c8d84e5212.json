{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/pages/login/loginPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginPage } from \"./style\";\nimport { authActions } from \"@eachbase/store\";\nimport { CopyRight, ForgotModal, LoginHeader, LoginModal, ResetModal } from \"@eachbase/fragments\";\nimport { MessageMiniScreen, MessageScreen } from \"@eachbase/components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LoginPage(props) {\n  _s();\n\n  const classes = loginPage();\n  const dispatch = useDispatch();\n  const [forgot, setForgot] = useState(false);\n  const [resetToken, setResetToken] = useState(\"\");\n  const {\n    loginErr,\n    loader,\n    getLinkSuccess,\n    resetSuccess,\n    closeResetSuccess\n  } = useSelector(state => ({\n    // loginErr: state.auth.loginErr,\n    // loader: state.auth.loader,\n    getLinkSuccess: state.auth.getLinkSuccess,\n    resetSuccess: state.auth.resetSuccess,\n    closeResetSuccess: state.auth.closeResetSuccess\n  }));\n\n  const handleForgot = () => {\n    setForgot(true);\n  };\n\n  const local = localStorage.getItem(\"Reset\");\n\n  if (local && !resetToken) {\n    let resetToken = local.slice(local.search(\"resetToken\"));\n    let slicedResetToken = resetToken.slice(11);\n    setResetToken(slicedResetToken);\n  }\n\n  useEffect(() => {\n    if (resetSuccess) {\n      setTimeout(() => dispatch(authActions.removeSuccess()), 3000);\n    }\n  }, [resetSuccess]);\n  const ResetToken = resetSuccess === true ? true : !!resetToken;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(LoginHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.loginPageBody,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.loginPageBodyPosition,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.loginPageTitle,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Customer\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 24\n            }, this), \"Management \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 41\n            }, this), \"System\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), getLinkSuccess !== null ? /*#__PURE__*/_jsxDEV(MessageScreen, {\n          type: getLinkSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this) : closeResetSuccess !== \"close\" && ResetToken ? /*#__PURE__*/_jsxDEV(ResetModal, {\n          resetToken: resetToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this) : forgot === false ? /*#__PURE__*/_jsxDEV(LoginModal, {\n          handleForgot: handleForgot\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ForgotModal, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), resetSuccess === true && /*#__PURE__*/_jsxDEV(MessageMiniScreen, {\n          text: \"Reset password success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.CopyRightPos,\n      children: /*#__PURE__*/_jsxDEV(CopyRight, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginPage, \"3/Kkps4NjgfVHxU+vAcdzQGAp5A=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/pages/login/loginPage.js"],"names":["React","useEffect","useState","useDispatch","useSelector","loginPage","authActions","CopyRight","ForgotModal","LoginHeader","LoginModal","ResetModal","MessageMiniScreen","MessageScreen","LoginPage","props","classes","dispatch","forgot","setForgot","resetToken","setResetToken","loginErr","loader","getLinkSuccess","resetSuccess","closeResetSuccess","state","auth","handleForgot","local","localStorage","getItem","slice","search","slicedResetToken","setTimeout","removeSuccess","ResetToken","loginPageBody","loginPageBodyPosition","loginPageTitle","CopyRightPos"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginPage } from \"./style\";\nimport { authActions } from \"@eachbase/store\";\nimport {\n  CopyRight,\n  ForgotModal,\n  LoginHeader,\n  LoginModal,\n  ResetModal,\n} from \"@eachbase/fragments\";\nimport { MessageMiniScreen, MessageScreen } from \"@eachbase/components\";\n\nexport function LoginPage(props) {\n  const classes = loginPage();\n  const dispatch = useDispatch();\n  const [forgot, setForgot] = useState(false);\n  const [resetToken, setResetToken] = useState(\"\");\n\n  const { loginErr, loader, getLinkSuccess, resetSuccess, closeResetSuccess } =\n    useSelector((state) => ({\n      // loginErr: state.auth.loginErr,\n      // loader: state.auth.loader,\n      getLinkSuccess: state.auth.getLinkSuccess,\n      resetSuccess: state.auth.resetSuccess,\n      closeResetSuccess: state.auth.closeResetSuccess,\n    }));\n\n  const handleForgot = () => {\n    setForgot(true);\n  };\n\n  const local = localStorage.getItem(\"Reset\");\n  if (local && !resetToken) {\n    let resetToken = local.slice(local.search(\"resetToken\"));\n    let slicedResetToken = resetToken.slice(11);\n    setResetToken(slicedResetToken);\n  }\n\n  useEffect(() => {\n    if (resetSuccess) {\n      setTimeout(() => dispatch(authActions.removeSuccess()), 3000);\n    }\n  }, [resetSuccess]);\n\n  const ResetToken = resetSuccess === true ? true : !!resetToken;\n\n  return (\n    <div>\n      <LoginHeader />\n      <div className={classes.loginPageBody}>\n        <div className={classes.loginPageBodyPosition}>\n          <div className={classes.loginPageTitle}>\n            <p>Customer<br />Management <br />System</p>\n          </div>\n\n          {getLinkSuccess !== null ? (\n            <MessageScreen type={getLinkSuccess} />\n          ) : closeResetSuccess !== \"close\" && ResetToken ? (\n            <ResetModal resetToken={resetToken} />\n          ) : forgot === false ? (\n            <LoginModal handleForgot={handleForgot} />\n          ) : (\n            <ForgotModal />\n          )}\n\n          {resetSuccess === true && (\n            <MessageMiniScreen text={\"Reset password success\"} />\n          )}\n        </div>\n      </div>\n\n      <div className={classes.CopyRightPos}>\n        <CopyRight />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}