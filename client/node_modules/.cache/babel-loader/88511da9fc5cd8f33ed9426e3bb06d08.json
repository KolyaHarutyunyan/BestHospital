{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/management/core/addRoleModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { AddModalButton, CheckboxesTags, CloseButton, ValidationInput } from \"@eachbase/components\";\nimport { managementFragments } from \"./style\";\nimport { globalModals, useGlobalTextStyles } from '@eachbase/utils';\nimport { useDispatch } from \"react-redux\";\nimport { roleActions } from \"@eachbase/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddRoleModal = ({\n  handleClose,\n  permissionsList\n}) => {\n  _s();\n\n  const classes = managementFragments();\n  const globalModalsClasses = globalModals();\n  const globalText = useGlobalTextStyles();\n  const [error, setError] = useState('');\n  const dispatch = useDispatch();\n  const [inputs, setInputs] = useState({});\n\n  const addRole = () => {\n    const permissionsList = [];\n\n    for (let i of inputs.permissions) {\n      permissionsList.push(i.id);\n    }\n\n    if (inputs.roleName && inputs.permissions) {\n      const body = {\n        \"title\": inputs.title,\n        \"description\": inputs.description,\n        \"permissions\": inputs.permissions\n      };\n      dispatch(roleActions.createRole(body));\n      handleClose();\n    } else if (!inputs.roleName) {\n      setError('title');\n    } else if (!inputs.description) {\n      setError('description');\n    } else if (!inputs.permissions) {\n      setError('permissions');\n    }\n  };\n\n  const handleChange = e => setInputs(prevState => ({ ...prevState,\n    [e.target.name]: e.target.value\n  }), error === e.target.name && setError(''));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: globalModalsClasses.smallModalWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: globalModalsClasses.smallModalClose,\n      children: /*#__PURE__*/_jsxDEV(CloseButton, {\n        handleCLic: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: globalModalsClasses.modalWrapperContent,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: globalText.modalTitle,\n        children: \"Want to Add Role?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: globalText.modalText,\n        children: [\"To add new role in the system, please set the name and assign\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 106\n        }, this), \" permissions to that role.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n        onChange: handleChange,\n        typeError: error === 'role',\n        style: classes.input,\n        variant: \"outlined\",\n        name: \"roleName\",\n        label: \"Set Role Name*\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CheckboxesTags, {\n        typeError: error === 'permissions',\n        handleChange: handleChange,\n        permissionsList: permissionsList,\n        label: \"Select Permissions*\",\n        placeholder: 'Permissions',\n        name: 'permissions'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n        onChange: handleChange,\n        typeError: error === 'role',\n        className: classes.inputDescription,\n        variant: \"outlined\",\n        name: \"description\",\n        label: \"Role Description\",\n        type: \"text\",\n        value: inputs.description,\n        multiline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Max 100 characters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddModalButton, {\n        styles: {\n          marginTop: '16px'\n        },\n        handleClick: addRole,\n        text: 'Add'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddRoleModal, \"md8cfhQqlMeA1hiSfH8HP6Sp598=\", false, function () {\n  return [useGlobalTextStyles, useDispatch];\n});\n\n_c = AddRoleModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddRoleModal\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/management/core/addRoleModal.js"],"names":["React","useState","AddModalButton","CheckboxesTags","CloseButton","ValidationInput","managementFragments","globalModals","useGlobalTextStyles","useDispatch","roleActions","AddRoleModal","handleClose","permissionsList","classes","globalModalsClasses","globalText","error","setError","dispatch","inputs","setInputs","addRole","i","permissions","push","id","roleName","body","title","description","createRole","handleChange","e","prevState","target","name","value","smallModalWrapper","smallModalClose","modalWrapperContent","modalTitle","modalText","input","inputDescription","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  AddModalButton,\n  CheckboxesTags,\n  CloseButton,\n  ValidationInput\n} from \"@eachbase/components\";\nimport { managementFragments } from \"./style\";\nimport {globalModals, useGlobalTextStyles} from '@eachbase/utils'\nimport { useDispatch } from \"react-redux\";\nimport { roleActions } from \"@eachbase/store\";\n\nexport const AddRoleModal =({handleClose, permissionsList})=>{\n  const classes = managementFragments();\n  const globalModalsClasses = globalModals();\n  const globalText = useGlobalTextStyles();\n  const [error, setError] = useState('')\n  const dispatch = useDispatch()\n    const [inputs, setInputs] = useState({});\n\n  const addRole =()=>{\n    const permissionsList = []\n    for(let i of inputs.permissions){\n      permissionsList.push(i.id)\n    }\n     if(inputs.roleName && inputs.permissions) {\n       const body ={\n         \"title\": inputs.title,\n         \"description\": inputs.description,\n         \"permissions\": inputs.permissions,\n       }\n       dispatch(roleActions.createRole(body))\n       handleClose()\n     }\n     else if(!inputs.roleName){\n       setError('title')\n     }\n     else if(!inputs.description){\n         setError('description')\n     }\n     else if(!inputs.permissions){\n       setError('permissions')\n     }\n  }\n\n    const handleChange = e => setInputs(prevState =>\n            ({ ...prevState, [e.target.name]: e.target.value }),\n        error === e.target.name && setError(''),\n    );\n\n  return(\n    <div className={globalModalsClasses.smallModalWrapper}>\n      <div className={globalModalsClasses.smallModalClose}>\n      <CloseButton handleCLic={handleClose}/>\n      </div>\n      <div className={globalModalsClasses.modalWrapperContent}>\n        <p className={globalText.modalTitle}>Want to Add Role?</p>\n        <p className={globalText.modalText}>To add new role in the system, please set the name and assign<br/> permissions to that role.</p>\n        <ValidationInput\n          onChange={handleChange}\n          typeError={error === 'role'}\n          style={classes.input}\n          variant={\"outlined\"}\n          name={\"roleName\"}\n          label={\"Set Role Name*\"}\n          type={\"text\"}\n        />\n        <CheckboxesTags\n          typeError={error === 'permissions'}\n          handleChange={handleChange}\n          permissionsList={permissionsList}\n          label={\"Select Permissions*\"}\n          placeholder={'Permissions'}\n          name={'permissions'}\n        />\n        <ValidationInput\n          onChange={handleChange}\n          typeError={error === 'role'}\n          className={classes.inputDescription}\n          variant={\"outlined\"}\n          name={\"description\"}\n          label={\"Role Description\"}\n          type={\"text\"}\n          value={inputs.description}\n          multiline={true}\n        />\n        <p>Max 100 characters</p>\n        <AddModalButton styles={{marginTop:'16px'}} handleClick={addRole} text={'Add'} />\n      </div>\n\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}