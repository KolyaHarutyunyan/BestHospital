{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/components/inputs/passwordInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { inputsStyle } from \"./styles\";\nimport { FormControl, Input, InputAdornment, IconButton, OutlinedInput, InputLabel } from \"@material-ui/core\";\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\nimport { ErrMessage } from \"../messages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PasswordInput = ({\n  name,\n  variant,\n  handleChangePassword,\n  disabled,\n  value,\n  placeholder,\n  typeError,\n  validator,\n  sendBoolean,\n  styles\n}) => {\n  _s();\n\n  const classes = inputsStyle();\n  const [validEmail, setValidEmail] = useState(false);\n  const [values, setValues] = React.useState({\n    amount: \"\",\n    password: \"\",\n    weight: \"\",\n    weightRange: \"\",\n    showPassword: false\n  });\n\n  const handleChanges = prop => event => {\n    setValues({ ...values,\n      [prop]: event.target.value\n    });\n    handleChangePassword(event);\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values,\n      showPassword: !values.showPassword\n    });\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const chechValid = e => {\n    let Value = e.target.value;\n\n    if (Value.length >= 1) {\n      if (validator) {\n        if (validator.test(Value)) {\n          setValidEmail(false);\n          sendBoolean(false);\n        } else {\n          setValidEmail(true);\n          sendBoolean(true);\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: { ...styles\n    },\n    children: variant === 'accountPassword' ? /*#__PURE__*/_jsxDEV(FormControl, {\n      className: classes.SignInInput,\n      variant: \"outlined\",\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        className: classes.inputShrink,\n        htmlFor: \"outlined-adornment-password\",\n        children: placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n        error: typeError,\n        disabled: disabled,\n        id: \"outlined-adornment-password\",\n        name: name,\n        type: values.showPassword ? \"text\" : \"password\",\n        value: value,\n        onChange: handleChanges(\"password\"),\n        onFocus: () => setValidEmail(false),\n        onBlur: e => chechValid(e),\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            disabled: disabled,\n            \"aria-label\": \"toggle password visibility\",\n            onClick: handleClickShowPassword,\n            onMouseDown: handleMouseDownPassword,\n            children: disabled === true ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 41\n            }, this) : values.showPassword ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ErrMessage, {\n        type: \"Pass\",\n        text: typeError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(FormControl, {\n      disabled: disabled,\n      className: classes.SignInInput,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        htmlFor: \"outlined-adornment-password\",\n        children: placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        error: typeError,\n        className: classes.PasswordInput,\n        disabled: disabled,\n        id: \"standard-adornment-password\",\n        name: name,\n        type: values.showPassword ? \"text\" : \"password\",\n        value: value,\n        onChange: handleChanges(\"password\"),\n        placeholder: placeholder,\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            disabled: disabled,\n            \"aria-label\": \"toggle password visibility\",\n            onClick: handleClickShowPassword,\n            onMouseDown: handleMouseDownPassword,\n            children: disabled === true ? /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 41\n            }, this) : values.showPassword ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ErrMessage, {\n        type: \"Pass\",\n        text: typeError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PasswordInput, \"lZE+yXiJc4wHq42H7tgmQP2gGUM=\");\n\n_c = PasswordInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordInput\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/components/inputs/passwordInput.js"],"names":["React","useState","inputsStyle","FormControl","Input","InputAdornment","IconButton","OutlinedInput","InputLabel","Visibility","VisibilityOff","ErrMessage","PasswordInput","name","variant","handleChangePassword","disabled","value","placeholder","typeError","validator","sendBoolean","styles","classes","validEmail","setValidEmail","values","setValues","amount","password","weight","weightRange","showPassword","handleChanges","prop","event","target","handleClickShowPassword","handleMouseDownPassword","preventDefault","chechValid","e","Value","length","test","SignInInput","inputShrink"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { inputsStyle } from \"./styles\";\nimport {\n    FormControl,\n    Input,\n    InputAdornment,\n    IconButton, OutlinedInput, InputLabel,\n} from \"@material-ui/core\";\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\nimport { ErrMessage } from \"../messages\";\n\nexport const PasswordInput = ({\n    name, variant,\n    handleChangePassword,\n    disabled,\n    value,\n    placeholder,\n    typeError, validator, sendBoolean, styles\n\n}) => {\n    const classes = inputsStyle();\n    const [validEmail, setValidEmail] = useState(false);\n    const [values, setValues] = React.useState({\n        amount: \"\",\n        password: \"\",\n        weight: \"\",\n        weightRange: \"\",\n        showPassword: false,\n    });\n\n    const handleChanges = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n        handleChangePassword(event);\n    };\n\n    const handleClickShowPassword = () => {\n        setValues({ ...values, showPassword: !values.showPassword });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n\n\n    const chechValid = (e) => {\n        let Value = e.target.value;\n        if (Value.length >= 1) {\n            if (validator) {\n                if (validator.test(Value)) {\n                    setValidEmail(false);\n                    sendBoolean(false);\n                } else {\n                    setValidEmail(true);\n                    sendBoolean(true);\n                }\n            }\n        }\n    };\n\n    return (\n        <div style={{ ...styles }}>\n            {variant === 'accountPassword' ?\n                <FormControl className={classes.SignInInput} variant=\"outlined\">\n                    <InputLabel className={classes.inputShrink} htmlFor=\"outlined-adornment-password\">{placeholder}</InputLabel>\n                    <OutlinedInput\n                        error={typeError}\n                        disabled={disabled}\n                        id=\"outlined-adornment-password\"\n                        name={name}\n                        type={values.showPassword ? \"text\" : \"password\"}\n                        value={value}\n                        onChange={handleChanges(\"password\")}\n                        onFocus={() => setValidEmail(false)}\n                        onBlur={(e) => chechValid(e)}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    disabled={disabled}\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                >\n                                    {disabled === true ? (\n                                        <VisibilityOff />\n                                    ) : values.showPassword ? (\n                                        <Visibility />\n                                    ) : (\n                                        <VisibilityOff />\n                                    )}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                    />\n                    <ErrMessage type={\"Pass\"} text={typeError} />\n                </FormControl>\n                :\n                <FormControl disabled={disabled} className={classes.SignInInput}>\n\n                    <InputLabel htmlFor=\"outlined-adornment-password\">{placeholder}</InputLabel>\n                    <Input\n                        error={typeError}\n                        className={classes.PasswordInput}\n                        disabled={disabled}\n                        id=\"standard-adornment-password\"\n                        name={name}\n                        type={values.showPassword ? \"text\" : \"password\"}\n                        value={value}\n                        onChange={handleChanges(\"password\")}\n                        placeholder={placeholder}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    disabled={disabled}\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                >\n                                    {disabled === true ? (\n                                        <VisibilityOff />\n                                    ) : values.showPassword ? (\n                                        <Visibility />\n                                    ) : (\n                                        <VisibilityOff />\n                                    )}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                    />\n                    <ErrMessage type={\"Pass\"} text={typeError} />\n                </FormControl>\n            }\n        </div>\n    );\n}\n    ;\n"]},"metadata":{},"sourceType":"module"}