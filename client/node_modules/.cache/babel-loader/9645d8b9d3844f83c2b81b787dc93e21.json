{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { authService } from \"./fundingSource.service\";\nimport { CREATE_FUNDING_SOURCE, GET_FUNDING_SOURCE, GET_FUNDING_SOURCE_BY_ID, GET_FUNDING_SOURCE_BY_ID_SUCCESS, GET_FUNDING_SOURCE_SUCCESS, GET_FUNDING_SOURCE_SERVICE_BY_ID, GET_FUNDING_SOURCE_SERVICE_BY_ID_SUCCESS, CREATE_FUNDING_SOURCE_SERVICE_BY_ID, GET_FUNDING_SOURCE_HISTORIES_BY_ID, GET_FUNDING_SOURCE_HISTORIES_BY_ID_SUCCESS, GET_FUNDING_SOURCE_SERV, GET_FUNDING_SOURCE_SERV_SUCCESS, CREATE_FUNDING_SOURCE_SERV } from \"./fundingSource.types\";\nimport { httpRequestsOnErrorsActions } from \"../http_requests_on_errors\";\nimport { httpRequestsOnLoadActions } from \"../http_requests_on_load\";\nimport { createFoundingSourceServiceById } from \"./fundingSource.action\";\n\nfunction* createFundingSource(action) {\n  try {\n    const res = yield call(authService.createFundingSourceService, action.payload.body);\n    window.location.replace('/fundingSource');\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getFundingSource({\n  action,\n  type\n}) {\n  yield put(httpRequestsOnErrorsActions.removeError(type));\n  yield put(httpRequestsOnLoadActions.appendLoading(type));\n\n  try {\n    const res = yield call(authService.getFundingSourceService);\n    yield put({\n      type: GET_FUNDING_SOURCE_SUCCESS,\n      payload: res.data\n    });\n    yield put(httpRequestsOnLoadActions.removeLoading(type));\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n  } catch (err) {\n    yield put(httpRequestsOnLoadActions.removeLoading(type));\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n    console.log(err);\n  }\n}\n\nfunction* getFundingSourceById(action) {\n  // yield put(httpRequestsOnErrorsActions.removeError(type));\n  // yield put(httpRequestsOnLoadActions.appendLoading(type));\n  console.log(action.payload, 'saga');\n\n  try {\n    const res = yield call(authService.getFoundingSourceByIdService, action.payload);\n    yield put({\n      type: GET_FUNDING_SOURCE_BY_ID_SUCCESS,\n      payload: res.data\n    }); // yield put(httpRequestsOnLoadActions.removeLoading(type));\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n  } catch (error) {\n    // yield put(httpRequestsOnLoadActions.removeLoading(type));\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n    console.log(error);\n  }\n}\n\nfunction* getFundingSourceServicesById(action) {\n  // yield put(httpRequestsOnErrorsActions.removeError(type));\n  // yield put(httpRequestsOnLoadActions.appendLoading(type));\n  try {\n    const res = yield call(authService.getFoundingSourceServiceByIdService, action.payload);\n    yield put({\n      type: GET_FUNDING_SOURCE_SERVICE_BY_ID_SUCCESS,\n      payload: res.data\n    }); // yield put(httpRequestsOnLoadActions.removeLoading(type));\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n  } catch (error) {// yield put(httpRequestsOnLoadActions.removeLoading(type));\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n  }\n}\n\nfunction* createFundingSourceServicesById({\n  payload\n}) {\n  try {\n    const res = yield call(authService.createFoundingSourceServiceByIdService, payload.id, payload.body);\n  } catch (error) {}\n}\n\nfunction* getFundingSourceHistoriesById(action) {\n  // yield put(httpRequestsOnErrorsActions.removeError(type));\n  // yield put(httpRequestsOnLoadActions.appendLoading(type));\n  try {\n    const res = yield call(authService.getFundingSourceHistoriesByIdService, action.payload);\n    yield put({\n      type: GET_FUNDING_SOURCE_HISTORIES_BY_ID_SUCCESS,\n      payload: res.data\n    }); // yield put(httpRequestsOnLoadActions.removeLoading(type));\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n  } catch (error) {\n    // yield put(httpRequestsOnLoadActions.removeLoading(type));\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n    console.log(error);\n  }\n}\n\nfunction* getFundingSourceServ(action) {\n  // yield put(httpRequestsOnErrorsActions.removeError(type));\n  // yield put(httpRequestsOnLoadActions.appendLoading(type));\n  try {\n    const res = yield call(authService.getFundingSourceServService);\n    yield put({\n      type: GET_FUNDING_SOURCE_SERV_SUCCESS,\n      payload: res.data\n    }); // yield put(httpRequestsOnLoadActions.removeLoading(type));\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n  } catch (error) {// yield put(httpRequestsOnLoadActions.removeLoading(type));\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n  }\n}\n\nfunction* creteFundingSourceServ({\n  payload\n}) {\n  try {\n    const res = yield call(authService.createFundingSourceServService, payload.body);\n  } catch (error) {}\n}\n\nexport const watchFundingSource = function* watchFundingSourceSaga() {\n  yield takeLatest(CREATE_FUNDING_SOURCE, createFundingSource);\n  yield takeLatest(GET_FUNDING_SOURCE, getFundingSource);\n  yield takeLatest(GET_FUNDING_SOURCE_BY_ID, getFundingSourceById);\n  yield takeLatest(GET_FUNDING_SOURCE_SERVICE_BY_ID, getFundingSourceServicesById);\n  yield takeLatest(CREATE_FUNDING_SOURCE_SERVICE_BY_ID, createFundingSourceServicesById);\n  yield takeLatest(GET_FUNDING_SOURCE_HISTORIES_BY_ID, getFundingSourceHistoriesById);\n  yield takeLatest(GET_FUNDING_SOURCE_SERV, getFundingSourceServ);\n  yield takeLatest(CREATE_FUNDING_SOURCE_SERV, creteFundingSourceServ);\n};","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/store/fundingSource/fundingSource.saga.js"],"names":["call","put","takeLatest","authService","CREATE_FUNDING_SOURCE","GET_FUNDING_SOURCE","GET_FUNDING_SOURCE_BY_ID","GET_FUNDING_SOURCE_BY_ID_SUCCESS","GET_FUNDING_SOURCE_SUCCESS","GET_FUNDING_SOURCE_SERVICE_BY_ID","GET_FUNDING_SOURCE_SERVICE_BY_ID_SUCCESS","CREATE_FUNDING_SOURCE_SERVICE_BY_ID","GET_FUNDING_SOURCE_HISTORIES_BY_ID","GET_FUNDING_SOURCE_HISTORIES_BY_ID_SUCCESS","GET_FUNDING_SOURCE_SERV","GET_FUNDING_SOURCE_SERV_SUCCESS","CREATE_FUNDING_SOURCE_SERV","httpRequestsOnErrorsActions","httpRequestsOnLoadActions","createFoundingSourceServiceById","createFundingSource","action","res","createFundingSourceService","payload","body","window","location","replace","err","console","log","getFundingSource","type","removeError","appendLoading","getFundingSourceService","data","removeLoading","getFundingSourceById","getFoundingSourceByIdService","error","getFundingSourceServicesById","getFoundingSourceServiceByIdService","createFundingSourceServicesById","createFoundingSourceServiceByIdService","id","getFundingSourceHistoriesById","getFundingSourceHistoriesByIdService","getFundingSourceServ","getFundingSourceServService","creteFundingSourceServ","createFundingSourceServService","watchFundingSource","watchFundingSourceSaga"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from \"redux-saga/effects\";\nimport {authService} from \"./fundingSource.service\";\nimport {\n    CREATE_FUNDING_SOURCE,\n    GET_FUNDING_SOURCE,\n    GET_FUNDING_SOURCE_BY_ID,\n    GET_FUNDING_SOURCE_BY_ID_SUCCESS,\n    GET_FUNDING_SOURCE_SUCCESS,\n    GET_FUNDING_SOURCE_SERVICE_BY_ID,\n    GET_FUNDING_SOURCE_SERVICE_BY_ID_SUCCESS,\n    CREATE_FUNDING_SOURCE_SERVICE_BY_ID,\n    GET_FUNDING_SOURCE_HISTORIES_BY_ID,\n    GET_FUNDING_SOURCE_HISTORIES_BY_ID_SUCCESS,\n    GET_FUNDING_SOURCE_SERV,\n    GET_FUNDING_SOURCE_SERV_SUCCESS,\n    CREATE_FUNDING_SOURCE_SERV\n\n\n} from \"./fundingSource.types\";\nimport {httpRequestsOnErrorsActions} from \"../http_requests_on_errors\";\nimport {httpRequestsOnLoadActions} from \"../http_requests_on_load\";\nimport {createFoundingSourceServiceById} from \"./fundingSource.action\";\n\nfunction* createFundingSource(action) {\n    try {\n        const res = yield call(authService.createFundingSourceService, action.payload.body);\n        window.location.replace('/fundingSource')\n    } catch (err) {\n        console.log(err)\n    }\n}\n\n\nfunction* getFundingSource({action, type}) {\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n    yield put(httpRequestsOnLoadActions.appendLoading(type));\n    try {\n        const res = yield call(authService.getFundingSourceService);\n        yield put({\n            type: GET_FUNDING_SOURCE_SUCCESS,\n            payload: res.data,\n        });\n        yield put(httpRequestsOnLoadActions.removeLoading(type));\n        yield put(httpRequestsOnErrorsActions.removeError(type));\n\n\n    } catch (err) {\n        yield put(httpRequestsOnLoadActions.removeLoading(type));\n        yield put(httpRequestsOnErrorsActions.removeError(type));\n        console.log(err)\n    }\n}\n\nfunction* getFundingSourceById(action) {\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n    // yield put(httpRequestsOnLoadActions.appendLoading(type));\n    console.log(action.payload, 'saga');\n\n    try {\n        const res = yield call(authService.getFoundingSourceByIdService, action.payload);\n        yield put({\n            type: GET_FUNDING_SOURCE_BY_ID_SUCCESS,\n            payload: res.data,\n        });\n        // yield put(httpRequestsOnLoadActions.removeLoading(type));\n        // yield put(httpRequestsOnErrorsActions.removeError(type));\n\n\n    } catch (error) {\n        // yield put(httpRequestsOnLoadActions.removeLoading(type));\n        // yield put(httpRequestsOnErrorsActions.removeError(type));\n        console.log(error)\n    }\n}\n\nfunction* getFundingSourceServicesById(action) {\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n    // yield put(httpRequestsOnLoadActions.appendLoading(type));\n    try {\n        const res = yield call(authService.getFoundingSourceServiceByIdService, action.payload);\n        yield put({\n            type: GET_FUNDING_SOURCE_SERVICE_BY_ID_SUCCESS,\n            payload: res.data,\n        });\n        // yield put(httpRequestsOnLoadActions.removeLoading(type));\n        // yield put(httpRequestsOnErrorsActions.removeError(type));\n\n\n    } catch (error) {\n        // yield put(httpRequestsOnLoadActions.removeLoading(type));\n        // yield put(httpRequestsOnErrorsActions.removeError(type));\n    }\n}\n\nfunction* createFundingSourceServicesById({payload}) {\n    try {\n        const res = yield call(authService.createFoundingSourceServiceByIdService, payload.id, payload.body);\n    } catch (error) {\n\n    }\n}\n\nfunction* getFundingSourceHistoriesById(action) {\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n    // yield put(httpRequestsOnLoadActions.appendLoading(type));\n    try {\n        const res = yield call(authService.getFundingSourceHistoriesByIdService, action.payload);\n        yield put({\n            type: GET_FUNDING_SOURCE_HISTORIES_BY_ID_SUCCESS,\n            payload: res.data,\n        });\n        // yield put(httpRequestsOnLoadActions.removeLoading(type));\n        // yield put(httpRequestsOnErrorsActions.removeError(type));\n\n\n    } catch (error) {\n        // yield put(httpRequestsOnLoadActions.removeLoading(type));\n        // yield put(httpRequestsOnErrorsActions.removeError(type));\n        console.log(error)\n    }\n}\nfunction* getFundingSourceServ(action) {\n    // yield put(httpRequestsOnErrorsActions.removeError(type));\n    // yield put(httpRequestsOnLoadActions.appendLoading(type));\n    try {\n        const res = yield call(authService.getFundingSourceServService);\n        yield put({\n            type: GET_FUNDING_SOURCE_SERV_SUCCESS,\n            payload: res.data,\n        });\n        // yield put(httpRequestsOnLoadActions.removeLoading(type));\n        // yield put(httpRequestsOnErrorsActions.removeError(type));\n\n\n    } catch (error) {\n        // yield put(httpRequestsOnLoadActions.removeLoading(type));\n        // yield put(httpRequestsOnErrorsActions.removeError(type));\n    }\n}\n\n\nfunction* creteFundingSourceServ({payload}) {\n    try {\n        const res = yield call(authService.createFundingSourceServService,  payload.body);\n    } catch (error) {\n\n    }\n}\n\n\nexport const watchFundingSource = function* watchFundingSourceSaga() {\n    yield takeLatest(CREATE_FUNDING_SOURCE, createFundingSource);\n    yield takeLatest(GET_FUNDING_SOURCE, getFundingSource);\n    yield takeLatest(GET_FUNDING_SOURCE_BY_ID, getFundingSourceById);\n    yield takeLatest(GET_FUNDING_SOURCE_SERVICE_BY_ID, getFundingSourceServicesById);\n    yield takeLatest(CREATE_FUNDING_SOURCE_SERVICE_BY_ID, createFundingSourceServicesById);\n    yield takeLatest(GET_FUNDING_SOURCE_HISTORIES_BY_ID, getFundingSourceHistoriesById);\n    yield takeLatest(GET_FUNDING_SOURCE_SERV, getFundingSourceServ);\n    yield takeLatest(CREATE_FUNDING_SOURCE_SERV, creteFundingSourceServ);\n\n};\n"]},"metadata":{},"sourceType":"module"}