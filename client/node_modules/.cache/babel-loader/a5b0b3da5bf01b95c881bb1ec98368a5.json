{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { authService } from \"./permissions.service\";\nimport { CREATE_PERMISSION, DELETE_PERMISSION, GET_PERMISSIONS, GET_PERMISSIONS_SUCCESS } from \"./permissions.types\";\nimport { httpRequestsOnErrorsActions } from \"../http_requests_on_errors\";\nimport { httpRequestsOnLoadActions } from \"../http_requests_on_load\";\n\nfunction* createPermission(action) {\n  try {\n    const res = yield call(authService.createPermissionService, action.payload.body);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getPermissions({\n  action,\n  type\n}) {\n  yield put(httpRequestsOnErrorsActions.removeError(type));\n  yield put(httpRequestsOnLoadActions.appendLoading(type));\n\n  try {\n    const res = yield call(authService.getPermissionsService);\n    yield put(httpRequestsOnLoadActions.removeLoading(type));\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n    yield put({\n      type: GET_PERMISSIONS_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    yield put(httpRequestsOnLoadActions.removeLoading(type));\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n    console.log(err);\n  }\n}\n\nfunction* deletePermission(action) {\n  try {\n    const res = yield call(authService.deletePermission, action.payload);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport const watchPermission = function* watchPermissionSaga() {\n  yield takeLatest(CREATE_PERMISSION, createPermission);\n  yield takeLatest(GET_PERMISSIONS, getPermissions);\n  yield takeLatest(DELETE_PERMISSION, deletePermission);\n};","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/store/permissions/permissions.saga.js"],"names":["call","put","takeLatest","authService","CREATE_PERMISSION","DELETE_PERMISSION","GET_PERMISSIONS","GET_PERMISSIONS_SUCCESS","httpRequestsOnErrorsActions","httpRequestsOnLoadActions","createPermission","action","res","createPermissionService","payload","body","err","console","log","getPermissions","type","removeError","appendLoading","getPermissionsService","removeLoading","data","deletePermission","watchPermission","watchPermissionSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,eAA/C,EAAgEC,uBAAhE,QACO,qBADP;AAEA,SAAQC,2BAAR,QAA0C,4BAA1C;AACA,SAAQC,yBAAR,QAAwC,0BAAxC;;AAEA,UAAUC,gBAAV,CAA2BC,MAA3B,EAAmC;AACjC,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAAEG,WAAW,CAACU,uBAAd,EAAuCF,MAAM,CAACG,OAAP,CAAeC,IAAtD,CAAtB;AAED,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAED,UAAUG,cAAV,CAAyB;AAACR,EAAAA,MAAD;AAASS,EAAAA;AAAT,CAAzB,EAAyC;AACvC,QAAMnB,GAAG,CAACO,2BAA2B,CAACa,WAA5B,CAAwCD,IAAxC,CAAD,CAAT;AACA,QAAMnB,GAAG,CAACQ,yBAAyB,CAACa,aAA1B,CAAwCF,IAAxC,CAAD,CAAT;;AACA,MAAI;AACF,UAAMR,GAAG,GAAG,MAAMZ,IAAI,CAAEG,WAAW,CAACoB,qBAAd,CAAtB;AACA,UAAMtB,GAAG,CAACQ,yBAAyB,CAACe,aAA1B,CAAwCJ,IAAxC,CAAD,CAAT;AACA,UAAMnB,GAAG,CAACO,2BAA2B,CAACa,WAA5B,CAAwCD,IAAxC,CAAD,CAAT;AACA,UAAMnB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEb,uBADE;AAERO,MAAAA,OAAO,EAAEF,GAAG,CAACa;AAFL,KAAD,CAAT;AAMD,GAVD,CAUE,OAAOT,GAAP,EAAY;AAEZ,UAAMf,GAAG,CAACQ,yBAAyB,CAACe,aAA1B,CAAwCJ,IAAxC,CAAD,CAAT;AACA,UAAMnB,GAAG,CAACO,2BAA2B,CAACa,WAA5B,CAAwCD,IAAxC,CAAD,CAAT;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAED,UAAUU,gBAAV,CAA2Bf,MAA3B,EAAmC;AACjC,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAAEG,WAAW,CAACuB,gBAAd,EAAgCf,MAAM,CAACG,OAAvC,CAAtB;AAED,GAHD,CAGE,OAAOE,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAED,OAAO,MAAMW,eAAe,GAAG,UAAUC,mBAAV,GAAgC;AAC7D,QAAM1B,UAAU,CAAEE,iBAAF,EAAqBM,gBAArB,CAAhB;AACA,QAAMR,UAAU,CAAEI,eAAF,EAAmBa,cAAnB,CAAhB;AACA,QAAMjB,UAAU,CAAEG,iBAAF,EAAqBqB,gBAArB,CAAhB;AACD,CAJM","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { authService } from \"./permissions.service\";\nimport { CREATE_PERMISSION, DELETE_PERMISSION, GET_PERMISSIONS, GET_PERMISSIONS_SUCCESS,\n} from \"./permissions.types\";\nimport {httpRequestsOnErrorsActions} from \"../http_requests_on_errors\";\nimport {httpRequestsOnLoadActions} from \"../http_requests_on_load\";\n\nfunction* createPermission(action) {\n  try {\n    const res = yield call( authService.createPermissionService, action.payload.body );\n\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nfunction* getPermissions({action, type}) {\n  yield put(httpRequestsOnErrorsActions.removeError(type));\n  yield put(httpRequestsOnLoadActions.appendLoading(type));\n  try {\n    const res = yield call( authService.getPermissionsService );\n    yield put(httpRequestsOnLoadActions.removeLoading(type));\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n    yield put({\n      type: GET_PERMISSIONS_SUCCESS,\n      payload: res.data,\n    });\n\n\n  } catch (err) {\n\n    yield put(httpRequestsOnLoadActions.removeLoading(type));\n    yield put(httpRequestsOnErrorsActions.removeError(type));\n    console.log(err)\n  }\n}\n\nfunction* deletePermission(action) {\n  try {\n    const res = yield call( authService.deletePermission, action.payload );\n\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nexport const watchPermission = function* watchPermissionSaga() {\n  yield takeLatest( CREATE_PERMISSION, createPermission );\n  yield takeLatest( GET_PERMISSIONS, getPermissions );\n  yield takeLatest( DELETE_PERMISSION, deletePermission );\n};\n"]},"metadata":{},"sourceType":"module"}