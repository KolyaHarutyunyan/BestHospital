{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/agents/createAgent/core/createAgentInputs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { EmailValidator, useGlobalStyles, useGlobalText, createInputsWrapper, ErrorText } from \"@eachbase/utils\";\nimport { AddressInput, CreateChancel, SelectInput, ValidationInput } from \"@eachbase/components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { agentActions } from \"@eachbase/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CreateAgentInputs = ({\n  handleChangeFirstName,\n  handleChangeLastName\n}) => {\n  _s();\n\n  const globalStyle = useGlobalText();\n  const globalInputs = useGlobalStyles();\n  const globalScreens = createInputsWrapper();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [error, setError] = useState(\"\");\n  const [inputs, setInputs] = useState({});\n  const [phone, setPhone] = useState('');\n  const [fullAddress, setFullAddress] = useState('');\n  const {\n    officesListReserve,\n    fundingSourceList\n  } = useSelector(state => ({\n    officesListReserve: state.offices.officesListReserve,\n    fundingSourceList: state.branches.fundingSourceList\n  }));\n\n  const handleChange = e => setInputs(prevState => ({ ...prevState,\n    [e.target.name]: e.target.value\n  }), error === e.target.name && setError(''), e.target.name === 'firstName' && handleChangeFirstName(e.target.value), e.target.name === 'lastName' && handleChangeLastName(e.target.value));\n\n  const handleCheck = bool => {\n    if (bool === true) {\n      setError(\"Not valid email\");\n    } else {\n      setError(\"\");\n    }\n  };\n\n  const handleCreate = () => {\n    const data = {\n      \"email\": inputs.email,\n      \"firstName\": inputs.firstName,\n      \"lastName\": inputs.lastName,\n      \"address\": fullAddress,\n      \"officeId\": inputs.officeName,\n      \"branchId\": inputs.branch\n    };\n\n    if (inputs.email && inputs.firstName && inputs.lastName && fullAddress && inputs.officeName) {\n      dispatch(agentActions.createAgent(data));\n    } else {\n      setError(!inputs.email ? 'email' : !inputs.firstName ? 'firstName' : !inputs.lastName ? 'lastName' : !fullAddress ? 'address' : !inputs.officeName ? 'officeName' : '');\n    }\n  };\n\n  const handleChangePhone = ev => {\n    if (ev.target.value.length <= 11) {\n      setPhone(ev.target.value);\n      error === 'phone' && setError('');\n    }\n  };\n\n  console.log(inputs, 'fullAddress');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: globalScreens.createInputsWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: globalStyle.title,\n      children: \"Person Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: globalScreens.basicInfo,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: globalStyle.smallText,\n        children: \"Basic Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: globalScreens.basicInfoInputs,\n          children: [/*#__PURE__*/_jsxDEV(ValidationInput, {\n            style: globalInputs.simpleInput,\n            variant: \"outlined\",\n            name: \"username\",\n            label: \"Username\",\n            value: inputs.username,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n            style: globalInputs.simpleInput,\n            variant: \"outlined\",\n            name: \"firstName\",\n            label: \"First Name*\",\n            typeError: error === 'firstName' && ErrorText.field,\n            value: inputs.firstName,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n            style: globalInputs.simpleInput,\n            variant: \"outlined\",\n            name: \"lastName\",\n            label: \"Last Name*\",\n            typeError: error === 'lastName' && ErrorText.field,\n            value: inputs.lastName,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: globalScreens.basicInfoInputs,\n          children: [/*#__PURE__*/_jsxDEV(SelectInput, {\n            style: globalInputs.simpleInput,\n            name: \"officeName\",\n            label: \"Office*\",\n            handleSelect: handleChange,\n            value: inputs.officeName,\n            list: officesListReserve,\n            typeError: error === 'officeName' ? ErrorText.field : '',\n            type: 'id'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), \" \", /*#__PURE__*/_jsxDEV(SelectInput, {\n            style: globalInputs.simpleInput,\n            name: \"branch\",\n            label: \"Branch*\",\n            handleSelect: handleChange,\n            value: inputs.branch,\n            list: fundingSourceList,\n            typeError: error === 'branch' ? ErrorText.field : '',\n            type: 'id'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n            style: globalInputs.simpleInput,\n            validator: EmailValidator,\n            variant: \"outlined\",\n            name: \"email\",\n            type: \"email\",\n            label: \"Email Address*\",\n            typeError: error === 'email' ? ErrorText.field : error === 'Not valid email' ? 'Not valid email' : '',\n            sendBoolean: handleCheck,\n            onChange: handleChange,\n            value: inputs.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n            style: globalInputs.simpleInput,\n            variant: \"outlined\",\n            name: \"phone\",\n            label: \"Phone Number*\",\n            type: 'number',\n            typeError: error === 'phone' ? ErrorText.field : '',\n            onChange: handleChangePhone,\n            value: phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: globalScreens.basicInfo,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: globalStyle.smallText,\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: globalScreens.basicInfoInputs,\n        children: /*#__PURE__*/_jsxDEV(AddressInput, {\n          handleSelectValue: setFullAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreateChancel, {\n      classes: globalInputs.buttonsStyle,\n      create: \"Create\",\n      chancel: \"Cancel\",\n      onCreate: handleCreate,\n      onClose: () => history.push(\"/agents\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateAgentInputs, \"tpURycOjklRgaotwliVlLYEKtvM=\", false, function () {\n  return [useGlobalText, useGlobalStyles, useDispatch, useHistory, useSelector];\n});\n\n_c = CreateAgentInputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAgentInputs\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/agents/createAgent/core/createAgentInputs.js"],"names":["React","useState","useHistory","EmailValidator","useGlobalStyles","useGlobalText","createInputsWrapper","ErrorText","AddressInput","CreateChancel","SelectInput","ValidationInput","useDispatch","useSelector","agentActions","CreateAgentInputs","handleChangeFirstName","handleChangeLastName","globalStyle","globalInputs","globalScreens","dispatch","history","error","setError","inputs","setInputs","phone","setPhone","fullAddress","setFullAddress","officesListReserve","fundingSourceList","state","offices","branches","handleChange","e","prevState","target","name","value","handleCheck","bool","handleCreate","data","email","firstName","lastName","officeName","branch","createAgent","handleChangePhone","ev","length","console","log","title","basicInfo","smallText","basicInfoInputs","simpleInput","username","field","buttonsStyle","push"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {\n    EmailValidator,\n    useGlobalStyles,\n    useGlobalText,\n    createInputsWrapper, ErrorText\n} from \"@eachbase/utils\";\nimport {AddressInput, CreateChancel, SelectInput, ValidationInput} from \"@eachbase/components\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {agentActions} from \"@eachbase/store\";\n\nexport const CreateAgentInputs = ({handleChangeFirstName, handleChangeLastName}) => {\n    const globalStyle = useGlobalText();\n    const globalInputs = useGlobalStyles();\n    const globalScreens = createInputsWrapper();\n    const dispatch = useDispatch()\n    const history = useHistory();\n    const [error, setError] = useState(\"\");\n    const [inputs, setInputs] = useState({});\n    const [phone, setPhone] = useState('')\n    const [fullAddress, setFullAddress] = useState('')\n\n    const {officesListReserve, fundingSourceList} = useSelector((state) => ({\n        officesListReserve: state.offices.officesListReserve,\n        fundingSourceList: state.branches.fundingSourceList\n    }));\n\n\n    const handleChange = e => setInputs(\n        prevState => ({...prevState, [e.target.name]: e.target.value}),\n        error === e.target.name && setError(''),\n        e.target.name === 'firstName' && handleChangeFirstName(e.target.value),\n        e.target.name === 'lastName' && handleChangeLastName(e.target.value),\n    );\n\n    const handleCheck = (bool) => {\n        if (bool === true) {\n            setError(\"Not valid email\");\n        } else {\n            setError(\"\");\n        }\n    };\n\n    const handleCreate = () => {\n\n\n        const data = {\n            \"email\": inputs.email,\n            \"firstName\": inputs.firstName,\n            \"lastName\": inputs.lastName,\n            \"address\": fullAddress,\n            \"officeId\": inputs.officeName,\n            \"branchId\": inputs.branch,\n        }\n\n        if (inputs.email && inputs.firstName && inputs.lastName && fullAddress && inputs.officeName) {\n            dispatch(agentActions.createAgent(data))\n\n\n        } else {\n            setError(\n                !inputs.email ? 'email' :\n                    !inputs.firstName ? 'firstName' :\n                        !inputs.lastName ? 'lastName' :\n                            !fullAddress ? 'address' :\n                                !inputs.officeName ? 'officeName' :\n                                    ''\n            )\n        }\n\n    }\n\n    const handleChangePhone = (ev) => {\n        if (ev.target.value.length <= 11) {\n            setPhone(ev.target.value)\n            error === 'phone' && setError('')\n        }\n    }\n    console.log(inputs, 'fullAddress')\n\n    return (\n        <div className={globalScreens.createInputsWrapper}>\n            <p className={globalStyle.title}>Person Information</p>\n\n            <div className={globalScreens.basicInfo}>\n                <p className={globalStyle.smallText}>Basic Information</p>\n\n                <div>\n                    <div className={globalScreens.basicInfoInputs}>\n\n                        <ValidationInput\n                            style={globalInputs.simpleInput}\n                            variant={\"outlined\"}\n                            name={\"username\"}\n                            label={\"Username\"}\n                            value={inputs.username}\n                            onChange={handleChange}\n                        />\n\n                        <ValidationInput\n                            style={globalInputs.simpleInput}\n                            variant={\"outlined\"}\n                            name={\"firstName\"}\n                            label={\"First Name*\"}\n                            typeError={error === 'firstName' && ErrorText.field}\n                            value={inputs.firstName}\n                            onChange={handleChange}\n                        />\n\n                        <ValidationInput\n                            style={globalInputs.simpleInput}\n                            variant={\"outlined\"}\n                            name={\"lastName\"}\n                            label={\"Last Name*\"}\n                            typeError={error === 'lastName' && ErrorText.field}\n                            value={inputs.lastName}\n                            onChange={handleChange}\n                        />\n                    </div>\n\n\n                    <div className={globalScreens.basicInfoInputs}>\n\n                        <SelectInput\n                            style={globalInputs.simpleInput}\n                            name={\"officeName\"}\n                            label={\"Office*\"}\n                            handleSelect={handleChange}\n                            value={inputs.officeName}\n                            list={officesListReserve}\n                            typeError={error === 'officeName' ? ErrorText.field : ''}\n                            type={'id'}\n\n                        /> <SelectInput\n                        style={globalInputs.simpleInput}\n                        name={\"branch\"}\n                        label={\"Branch*\"}\n                        handleSelect={handleChange}\n                        value={inputs.branch}\n                        list={fundingSourceList}\n                        typeError={error === 'branch' ? ErrorText.field : ''}\n                        type={'id'}\n\n                    />\n\n\n                        <ValidationInput\n                            style={globalInputs.simpleInput}\n                            validator={EmailValidator}\n                            variant={\"outlined\"}\n                            name={\"email\"}\n                            type={\"email\"}\n                            label={\"Email Address*\"}\n                            typeError={error === 'email' ? ErrorText.field : error === 'Not valid email' ? 'Not valid email' : ''}\n                            sendBoolean={handleCheck}\n                            onChange={handleChange}\n                            value={inputs.email}\n                        />\n\n                        <ValidationInput\n                            style={globalInputs.simpleInput}\n                            variant={\"outlined\"}\n                            name={\"phone\"}\n                            label={\"Phone Number*\"}\n                            type={'number'}\n                            typeError={error === 'phone' ? ErrorText.field : ''}\n                            onChange={handleChangePhone}\n                            value={phone}\n\n                        />\n\n                    </div>\n\n\n                </div>\n            </div>\n\n            <div className={globalScreens.basicInfo}>\n                <p className={globalStyle.smallText}>Address</p>\n                <div className={globalScreens.basicInfoInputs}>\n                    <AddressInput\n                        handleSelectValue={setFullAddress}\n                    />\n                </div>\n            </div>\n\n\n            <p>{error}</p>\n            <CreateChancel\n                classes={globalInputs.buttonsStyle}\n                create={\"Create\"}\n                chancel={\"Cancel\"}\n                onCreate={handleCreate}\n                onClose={() => history.push(\"/agents\")}\n            />\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}