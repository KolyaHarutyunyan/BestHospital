{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/components/inputs/addressInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport { inputsStyle } from \"./styles\";\nimport { API_BASE } from \"@eachbase/store\";\nimport axios from \"axios\";\nimport { CountryList, useGlobalStyles } from \"@eachbase/utils\";\nimport { SelectInput, ValidationInput } from \"@eachbase/components\";\nimport { Country, State, City } from 'country-state-city';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst path = `${API_BASE}`;\nexport const AddressInput = ({\n  handleSelectValue,\n  disableLabels,\n  Value,\n  handleSendAddresses,\n  info,\n  disabled,\n  flex\n}) => {\n  _s();\n\n  const classes = inputsStyle();\n  const globalInputs = useGlobalStyles();\n  const [address, setAddress] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [fullAddress, setFullAddress] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [code, setCode] = useState('');\n  const [inputs, setInputs] = useState(info ? { ...info.address\n  } : {});\n  const Country = inputs.country ? inputs.country : fullAddress.country ? fullAddress.country : '';\n  const City = inputs.city ? inputs.city : fullAddress.city ? fullAddress.city : '';\n  const States = inputs.state ? inputs.state : fullAddress.state ? fullAddress.state : '';\n  const Zip = inputs.zip ? inputs.zip : fullAddress.zip ? fullAddress.zip : '';\n  const Street = fullAddress ? fullAddress.street : address ? address : '';\n  const fullAddressCompleted = `${Street} ${City} ${States} ${Zip} ${Country}`;\n\n  const handleChangeAddress = value => {\n    setAddress(value);\n  };\n\n  const handleSelect = async (value, ev) => {\n    setAddress(value);\n    setLoading(true);\n    await axios.post(`/address`, {\n      address: value\n    }).then(function (response) {\n      handleSelectValue(response.data.formattedAddress);\n      setFullAddress(response.data);\n      setLoading(false);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  const handleChange = e => setInputs(prevState => ({ ...prevState,\n    [e.target.name]: e.target.value\n  }), error === e.target.name && setError(''), handleSelectValue(fullAddressCompleted));\n\n  const stateList = code ? State.getStatesOfCountry(code) : State.getStatesOfCountry('US');\n  const disable = false;\n  const placeholder = Value ? Value : \"Physical Address*\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: flex ? flex : 'flex',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: address,\n      onChange: handleChangeAddress,\n      onSelect: ev => handleSelect(ev),\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: globalInputs.simpleInput,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: classes.searchAddress,\n          ...getInputProps({\n            placeholder: placeholder,\n            disabled: disabled,\n            style: {\n              marginBottom: flex ? '8px' : ''\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.searchAddressDescription,\n          children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 27\n          }, this), suggestions.map((suggestion, index) => {\n            const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\";\n            const style = suggestion.active ? {\n              backgroundColor: \"#fafafa\",\n              cursor: \"pointer\"\n            } : {\n              backgroundColor: \"#ffffff\",\n              cursor: \"pointer\"\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                className,\n                style\n              }),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.searchAddressDescriptionText,\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SelectInput, {\n      style: globalInputs.simpleInput,\n      name: \"country\",\n      label: \"Country*\",\n      handleSelect: handleChange,\n      handleChangeCountryCode: setCode,\n      loader: loading,\n      value: Country,\n      list: CountryList,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n      style: globalInputs.simpleInput,\n      variant: \"outlined\",\n      name: \"city\",\n      type: \"name\",\n      label: \"City*\",\n      onChange: handleChange,\n      value: City,\n      loader: loading,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SelectInput, {\n      style: globalInputs.simpleInput,\n      name: \"state\",\n      label: \"State\",\n      handleSelect: handleChange,\n      loader: loading,\n      value: States,\n      list: stateList,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n      variant: \"outlined\",\n      name: \"zip\",\n      type: \"number\",\n      label: \"Zip Code\",\n      onChange: handleChange,\n      value: Zip,\n      loader: loading,\n      disabled: disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddressInput, \"aq/vigTcV8ceW1gkms2wlB5vSEI=\", false, function () {\n  return [useGlobalStyles];\n});\n\n_c = AddressInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressInput\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/components/inputs/addressInput.js"],"names":["React","useState","PlacesAutocomplete","inputsStyle","API_BASE","axios","CountryList","useGlobalStyles","SelectInput","ValidationInput","Country","State","City","path","AddressInput","handleSelectValue","disableLabels","Value","handleSendAddresses","info","disabled","flex","classes","globalInputs","address","setAddress","error","setError","fullAddress","setFullAddress","loading","setLoading","code","setCode","inputs","setInputs","country","city","States","state","Zip","zip","Street","street","fullAddressCompleted","handleChangeAddress","value","handleSelect","ev","post","then","response","data","formattedAddress","catch","console","log","handleChange","e","prevState","target","name","stateList","getStatesOfCountry","disable","placeholder","display","width","getInputProps","suggestions","getSuggestionItemProps","simpleInput","searchAddress","style","marginBottom","searchAddressDescription","map","suggestion","index","className","active","backgroundColor","cursor","searchAddressDescriptionText","description"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport { inputsStyle } from \"./styles\";\nimport { API_BASE } from \"@eachbase/store\";\nimport axios from \"axios\";\nimport { CountryList, useGlobalStyles } from \"@eachbase/utils\";\nimport { SelectInput, ValidationInput } from \"@eachbase/components\";\nimport { Country, State, City } from 'country-state-city';\n\n\n\nconst path = `${API_BASE}`;\nexport const AddressInput = ({ handleSelectValue, disableLabels, Value, handleSendAddresses, info, disabled, flex }) => {\n  const classes = inputsStyle();\n  const globalInputs = useGlobalStyles();\n  const [address, setAddress] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [fullAddress, setFullAddress] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [code, setCode] = useState('')\n  const [inputs, setInputs] = useState(info ? { ...info.address } : {});\n  const Country = inputs.country ? inputs.country : fullAddress.country ? fullAddress.country : ''\n  const City = inputs.city ? inputs.city : fullAddress.city ? fullAddress.city : ''\n  const States = inputs.state ? inputs.state : fullAddress.state ? fullAddress.state : ''\n  const Zip = inputs.zip ? inputs.zip : fullAddress.zip ? fullAddress.zip : ''\n  const Street = fullAddress ? fullAddress.street : address ? address : ''\n\n  const fullAddressCompleted = `${Street} ${City} ${States} ${Zip} ${Country}`\n\n  const handleChangeAddress = (value) => { \n    setAddress(value);\n  };\n\n  const handleSelect = async (value, ev) => {\n    setAddress(value);\n    setLoading(true)\n    await axios.post(`/address`, { address: value })\n      .then(function (response) {\n        handleSelectValue(response.data.formattedAddress);\n        setFullAddress(response.data);\n        setLoading(false)\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  const handleChange = e => setInputs(\n    prevState => ({ ...prevState, [e.target.name]: e.target.value }),\n    error === e.target.name && setError(''),\n    handleSelectValue(fullAddressCompleted),\n  );\n\n  const stateList = code ? State.getStatesOfCountry(code) : State.getStatesOfCountry('US')\n\n  const disable = false;\n  const placeholder = Value ? Value : \"Physical Address*\";\n\n\n  return (\n    <div style={{ display: flex ? flex : 'flex', width: '100%' }}>\n      <PlacesAutocomplete value={address} onChange={handleChangeAddress} onSelect={(ev) => handleSelect(ev)}>\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div className={globalInputs.simpleInput}>\n            <input\n\n              className={classes.searchAddress}\n              {...getInputProps({\n                placeholder: placeholder,\n                disabled: disabled,\n                style: { marginBottom: flex ? '8px' : '' }\n              })}\n            />\n            <div className={classes.searchAddressDescription}>\n              {loading && <div>Loading...</div>}\n              {suggestions.map((suggestion, index) => {\n                const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\";\n                const style = suggestion.active\n                  ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                  : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                return (\n                  <div\n                    key={index}\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style\n                    })}>\n                    <span className={classes.searchAddressDescriptionText}>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n\n\n\n      <SelectInput\n        style={globalInputs.simpleInput}\n        name={\"country\"}\n        label={\"Country*\"}\n        handleSelect={handleChange}\n        handleChangeCountryCode={setCode}\n        loader={loading}\n        value={Country}\n        list={CountryList}\n        disabled={disabled}\n\n      />\n\n      <ValidationInput\n        style={globalInputs.simpleInput}\n        variant={\"outlined\"}\n        name={\"city\"}\n        type={\"name\"}\n        label={\"City*\"}\n        onChange={handleChange}\n        value={City}\n        loader={loading}\n        disabled={disabled}\n      />\n\n\n      <SelectInput\n        style={globalInputs.simpleInput}\n        name={\"state\"}\n        label={\"State\"}\n        handleSelect={handleChange}\n        loader={loading}\n        value={States}\n        list={stateList}\n        disabled={disabled}\n\n      />\n\n      <ValidationInput\n        variant={\"outlined\"}\n        name={\"zip\"}\n        type={\"number\"}\n        label={\"Zip Code\"}\n        onChange={handleChange}\n        value={Zip}\n        loader={loading}\n        disabled={disabled}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}