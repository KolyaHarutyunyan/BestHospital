{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { authService } from \"./role.service\";\nimport { ADD_ROLE_PERMISSION, CREATE_ROLE, CREATE_ROLE_SUCCESS, DELETE_ROLE, DELETE_ROLE_PERMISSION, DELETE_ROLE_PERMISSION_SUCCESS, DELETE_ROLE_SUCCESS, GET_ROLE, GET_ROLE_BY_ID, GET_ROLE_BY_ID_SUCCESS, GET_ROLE_SUCCESS } from \"./role.types\";\nimport { roleActions } from \"./index\";\n\nfunction* createRole(action) {\n  try {\n    const res = yield call(authService.createRoleService, action.payload.body); // yield put(roleActions.getRole())\n\n    yield put({\n      type: CREATE_ROLE_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getRole(action) {\n  try {\n    const res = yield call(authService.getRoleService, action.payload);\n    yield put({\n      type: GET_ROLE_SUCCESS,\n      payload: res.data.reverse()\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* deleteRole(action) {\n  try {\n    const res = yield call(authService.deleteRoleService, action.payload.id);\n    yield put(roleActions.getRole());\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getRoleById(action) {\n  try {\n    const res = yield call(authService.getRoleByIdService, action.payload.id);\n    yield put({\n      type: GET_ROLE_BY_ID_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* addRolePermission(action) {\n  try {\n    const res = yield call(authService.addRolePermissionService, action.payload.body);\n    yield put(roleActions.getRoleById(action.payload.body.roleId));\n  } catch (err) {}\n}\n\nfunction* deleteRolePermission(action) {\n  try {\n    const res = yield call(authService.deleteRolePermissionService, action.payload.data);\n    yield put(roleActions.getRoleById(action.payload.data.roleId));\n  } catch (err) {}\n}\n\nexport const watchRole = function* watchRoleSaga() {\n  yield takeLatest(CREATE_ROLE, createRole);\n  yield takeLatest(GET_ROLE, getRole);\n  yield takeLatest(DELETE_ROLE, deleteRole);\n  yield takeLatest(GET_ROLE_BY_ID, getRoleById);\n  yield takeLatest(ADD_ROLE_PERMISSION, addRolePermission);\n  yield takeLatest(DELETE_ROLE_PERMISSION, deleteRolePermission);\n};","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/store/role/role.saga.js"],"names":["call","put","takeLatest","authService","ADD_ROLE_PERMISSION","CREATE_ROLE","CREATE_ROLE_SUCCESS","DELETE_ROLE","DELETE_ROLE_PERMISSION","DELETE_ROLE_PERMISSION_SUCCESS","DELETE_ROLE_SUCCESS","GET_ROLE","GET_ROLE_BY_ID","GET_ROLE_BY_ID_SUCCESS","GET_ROLE_SUCCESS","roleActions","createRole","action","res","createRoleService","payload","body","type","data","err","console","log","getRole","getRoleService","reverse","deleteRole","deleteRoleService","id","getRoleById","getRoleByIdService","addRolePermission","addRolePermissionService","roleId","deleteRolePermission","deleteRolePermissionService","watchRole","watchRoleSaga"],"mappings":"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","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { authService } from \"./role.service\";\nimport {\n  ADD_ROLE_PERMISSION,\n  CREATE_ROLE, CREATE_ROLE_SUCCESS,\n  DELETE_ROLE, DELETE_ROLE_PERMISSION, DELETE_ROLE_PERMISSION_SUCCESS, DELETE_ROLE_SUCCESS,\n  GET_ROLE,\n  GET_ROLE_BY_ID,\n  GET_ROLE_BY_ID_SUCCESS,\n  GET_ROLE_SUCCESS\n} from \"./role.types\";\nimport { roleActions } from \"./index\";\n\nfunction* createRole(action) {\n  try {\n    const res = yield call( authService.createRoleService, action.payload.body );\n    // yield put(roleActions.getRole())\n    yield put({\n      type: CREATE_ROLE_SUCCESS,\n      payload: res.data,\n    });\n\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nfunction* getRole(action) {\n  try {\n    const res = yield call( authService.getRoleService, action.payload );\n    yield put({\n      type: GET_ROLE_SUCCESS,\n      payload: res.data.reverse(),\n    });\n\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nfunction* deleteRole(action) {\n  try {\n    const res = yield call( authService.deleteRoleService, action.payload.id );\n    yield put(roleActions.getRole())\n\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nfunction* getRoleById(action) {\n  try {\n    const res = yield call( authService.getRoleByIdService, action.payload.id );\n    yield put({\n      type: GET_ROLE_BY_ID_SUCCESS,\n      payload: res.data,\n    });\n\n\n  } catch (err) {\n    console.log(err)\n  }\n}\n\n\nfunction* addRolePermission(action){\n  try {\n    const res = yield call( authService.addRolePermissionService, action.payload.body );\n    yield put ( roleActions.getRoleById(action.payload.body.roleId) )\n  }catch (err){\n\n  }\n}\nfunction* deleteRolePermission(action){\n  try {\n    const res = yield call( authService.deleteRolePermissionService, action.payload.data );\n  yield put ( roleActions.getRoleById(action.payload.data.roleId) )\n\n  }catch (err){\n\n  }\n}\n\nexport const watchRole = function* watchRoleSaga() {\n  yield takeLatest( CREATE_ROLE, createRole );\n  yield takeLatest( GET_ROLE, getRole );\n  yield takeLatest( DELETE_ROLE, deleteRole );\n  yield takeLatest( GET_ROLE_BY_ID, getRoleById );\n\n  yield takeLatest(ADD_ROLE_PERMISSION, addRolePermission)\n  yield takeLatest(DELETE_ROLE_PERMISSION, deleteRolePermission)\n};\n"]},"metadata":{},"sourceType":"module"}