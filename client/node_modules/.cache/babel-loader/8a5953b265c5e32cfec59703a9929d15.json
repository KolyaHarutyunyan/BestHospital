{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/login/core/resetModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { authActions } from \"@eachbase/store\";\nimport { loginFragments } from \"./style\";\nimport { PasswordInput, SignIn } from \"@eachbase/components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ResetModal = ({\n  resetToken\n}) => {\n  _s();\n\n  const classes = loginFragments();\n  const dispatch = useDispatch();\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleChange = ev => {\n    setError(\"\");\n\n    if (ev.target.name === \"newPassword\") {\n      setNewPassword(ev.target.value);\n    } else {\n      setConfirmPassword(ev.target.value);\n    }\n  };\n\n  const resetPassword = () => {\n    if (newPassword && confirmPassword) {\n      const passwords = {\n        newPassword: newPassword,\n        confirmation: confirmPassword,\n        token: resetToken\n      };\n      dispatch(authActions.resetPassword(passwords));\n    } else {\n      if (!newPassword) {\n        setError(\"New password is not field\");\n      } else if (!confirmPassword) {\n        setError(\"Confirm password is not field\");\n      }\n    }\n  };\n\n  const errorNewPassword = error === \"New password is not field\" ? \"New password is not field\" : \"\";\n  const errorConfirmPassword = error === \"Confirm password is not field\" ? \"Confirm password is not field\" : \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"343px\"\n    },\n    className: classes.LoginModalWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: classes.LoginModalForgotText,\n      children: [\"Enter your new password.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), \" Use at least 8 characters, 1 upper case and 1 digit.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PasswordInput, {\n      handleChangePassword: handleChange,\n      type: \"password\",\n      name: \"newPassword\",\n      disabled: false,\n      value: newPassword,\n      onChange: handleChange,\n      typeError: errorNewPassword,\n      placeholder: \"New Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PasswordInput, {\n      handleChangePassword: handleChange,\n      type: \"password\",\n      name: \"confirmPassword\",\n      disabled: false,\n      value: confirmPassword,\n      onChange: handleChange,\n      typeError: errorConfirmPassword,\n      placeholder: \"Confirm New Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignIn, {\n      handleClick: resetPassword,\n      width: \"100%\",\n      text: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetModal, \"3aUQvNYC7pM0iIPlcnr2QHWVxaQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ResetModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetModal\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/login/core/resetModal.js"],"names":["React","useState","useDispatch","authActions","loginFragments","PasswordInput","SignIn","ResetModal","resetToken","classes","dispatch","newPassword","setNewPassword","confirmPassword","setConfirmPassword","error","setError","handleChange","ev","target","name","value","resetPassword","passwords","confirmation","token","errorNewPassword","errorConfirmPassword","height","LoginModalWrapper","LoginModalForgotText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { authActions } from \"@eachbase/store\";\nimport { loginFragments } from \"./style\";\nimport { PasswordInput, SignIn } from \"@eachbase/components\";\n\nexport const ResetModal = ({ resetToken }) => {\n  const classes = loginFragments();\n  const dispatch = useDispatch();\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleChange = (ev) => {\n    setError(\"\");\n    if (ev.target.name === \"newPassword\") {\n      setNewPassword(ev.target.value);\n    } else {\n      setConfirmPassword(ev.target.value);\n    }\n  };\n\n  const resetPassword = () => {\n    if (newPassword && confirmPassword) {\n      const passwords = {\n        newPassword: newPassword,\n        confirmation: confirmPassword,\n        token: resetToken,\n      };\n      dispatch(authActions.resetPassword(passwords));\n    } else {\n      if (!newPassword) {\n        setError(\"New password is not field\");\n      } else if (!confirmPassword) {\n        setError(\"Confirm password is not field\");\n      }\n    }\n  };\n\n  const errorNewPassword =\n    error === \"New password is not field\" ? \"New password is not field\" : \"\";\n  const errorConfirmPassword =\n    error === \"Confirm password is not field\"\n      ? \"Confirm password is not field\"\n      : \"\";\n\n  return (\n    <div style={{ height: \"343px\" }} className={classes.LoginModalWrapper}>\n      <p>Reset Password</p>\n      <span className={classes.LoginModalForgotText}>\n        Enter your new password.\n        <br /> Use at least 8 characters, 1 upper case and 1 digit.\n      </span>\n\n      <PasswordInput\n        handleChangePassword={handleChange}\n        type={\"password\"}\n        name={\"newPassword\"}\n        disabled={false}\n        value={newPassword}\n        onChange={handleChange}\n        typeError={errorNewPassword}\n        placeholder={\"New Password\"}\n      />\n\n      <PasswordInput\n        handleChangePassword={handleChange}\n        type={\"password\"}\n        name={\"confirmPassword\"}\n        disabled={false}\n        value={confirmPassword}\n        onChange={handleChange}\n        typeError={errorConfirmPassword}\n        placeholder={\"Confirm New Password\"}\n      />\n\n      <SignIn\n        handleClick={resetPassword}\n        width={\"100%\"}\n        text={\"Reset Password\"}\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}