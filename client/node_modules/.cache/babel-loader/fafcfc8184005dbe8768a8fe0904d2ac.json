{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/login/core/forgotModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EmailValidator } from '@eachbase/utils';\nimport { loginFragments } from \"./style\";\nimport { authActions } from \"@eachbase/store\";\nimport { SignIn, ValidationInput } from \"@eachbase/components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ForgotModal = ({}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const classes = loginFragments();\n  const [email, setEmail] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [validEmail, setValidEmail] = useState(false);\n  const {\n    loginErr,\n    getLinkLoading\n  } = useSelector(state => ({\n    loginErr: state.auth.loginErr,\n    loader: state.auth.loader,\n    getLinkLoading: state.auth.getLinkLoading\n  }));\n\n  const GetLink = () => {\n    if (validEmail === false && email && email !== \"Not valid email\") {\n      dispatch(authActions.getRecoveryLink(email));\n    } else {\n      if (!email) {\n        setError(\"notMathLogin\");\n      }\n    }\n  };\n\n  const handleChange = ev => {\n    setEmail(ev.target.value); // dispatch (authActions.clearError ())\n  };\n\n  const handleCheck = bool => {\n    if (bool === true) {\n      setValidEmail(\"Not valid email\");\n    } else {\n      setValidEmail(false);\n    }\n  };\n\n  const NotMathEmail = loginErr === \"User with this email was not found\" ? \"User with this email was not found\" : error === \"notMathLogin\" ? \"Input is not field\" : validEmail === \"Not valid email\" ? \"Not valid email\" : \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.LoginModalWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Forgot your password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: classes.LoginModalForgotText,\n      children: \"Enter your email address and we'll send you a recovery email to reset your password.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"10px 0 20px 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ValidationInput, {\n        validator: EmailValidator,\n        value: email,\n        onChange: handleChange,\n        sendBoolean: handleCheck,\n        typeError: NotMathEmail,\n        name: \"email\",\n        type: \"email\",\n        label: \"Email\",\n        id: \"email\",\n        autoComplete: \"current-email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignIn, {\n      loader: getLinkLoading,\n      handleClick: GetLink,\n      width: \"100%\",\n      text: \"Get Recovery Link\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForgotModal, \"6SueIuG+yPOo7Vo9XHrF7p4hJ8s=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ForgotModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotModal\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/login/core/forgotModal.js"],"names":["React","useState","useDispatch","useSelector","EmailValidator","loginFragments","authActions","SignIn","ValidationInput","ForgotModal","dispatch","classes","email","setEmail","error","setError","validEmail","setValidEmail","loginErr","getLinkLoading","state","auth","loader","GetLink","getRecoveryLink","handleChange","ev","target","value","handleCheck","bool","NotMathEmail","LoginModalWrapper","LoginModalForgotText","margin"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EmailValidator } from '@eachbase/utils';\nimport { loginFragments } from \"./style\";\nimport { authActions } from \"@eachbase/store\";\nimport { SignIn, ValidationInput } from \"@eachbase/components\";\n\nexport const ForgotModal = ({}) => {\n  const dispatch = useDispatch();\n  const classes = loginFragments();\n  const [email, setEmail] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [validEmail, setValidEmail] = useState(false);\n\n  const { loginErr, getLinkLoading } = useSelector((state) => ({\n    loginErr: state.auth.loginErr,\n    loader: state.auth.loader,\n    getLinkLoading: state.auth.getLinkLoading,\n  }));\n\n  const GetLink = () => {\n    if (validEmail === false && email && email !== \"Not valid email\") {\n      dispatch(authActions.getRecoveryLink(email));\n    } else {\n      if (!email) {\n        setError(\"notMathLogin\");\n      }\n    }\n  };\n\n  const handleChange = (ev) => {\n    setEmail(ev.target.value);\n    // dispatch (authActions.clearError ())\n  };\n\n  const handleCheck = (bool) => {\n    if (bool === true) {\n      setValidEmail(\"Not valid email\");\n    } else {\n      setValidEmail(false);\n    }\n  };\n\n  const NotMathEmail =\n    loginErr === \"User with this email was not found\"\n      ? \"User with this email was not found\"\n      : error === \"notMathLogin\"\n      ? \"Input is not field\"\n      : validEmail === \"Not valid email\"\n      ? \"Not valid email\"\n      : \"\";\n\n  return (\n    <div className={classes.LoginModalWrapper}>\n      <p>Forgot your password?</p>\n      <span className={classes.LoginModalForgotText}>\n        Enter your email address and we'll send you a recovery email to reset\n        your password.\n      </span>\n\n      <div style={{ margin: \"10px 0 20px 0\" }}>\n        <ValidationInput\n          validator={EmailValidator}\n          value={email}\n          onChange={handleChange}\n          sendBoolean={handleCheck}\n          typeError={NotMathEmail}\n          name={\"email\"}\n          type={\"email\"}\n          label={\"Email\"}\n          id={\"email\"}\n          autoComplete={\"current-email\"}\n        />\n      </div>\n\n      <SignIn\n        loader={getLinkLoading}\n        handleClick={GetLink}\n        width={\"100%\"}\n        text={\"Get Recovery Link\"}\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}