{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/components/steps/steps.js\",\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport generalIcon from \"@eachbase/assets/images/icons/generalInfo.svg\";\nimport address from \"@eachbase/assets/images/icons/address.svg\";\nimport otherDetails from \"@eachbase/assets/images/icons/otherDetails.svg\";\nimport { stepStyles, useStyles, useColorlibStepIconStyles, ColorlibConnector } from \"./styles\";\nimport checkmark from \"@eachbase/assets/images/icons/checkmark.svg\";\nimport { CreateChancel } from \"@eachbase/components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Steps = ({\n  stepTitles,\n  handleClose,\n  firstStep,\n  secondStep,\n  thirdStep\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const classes = useStyles();\n  const stepsStyles = stepStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const handleNext = () => {\n    if (activeStep !== stepTitles.length - 1) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n    } else {\n      alert('send request');\n    }\n  };\n\n  const handleBack = step => {\n    setActiveStep(step - 1);\n  };\n\n  function ColorlibStepIcon(props) {\n    _s();\n\n    const classes = useColorlibStepIconStyles();\n    const {\n      active,\n      completed\n    } = props;\n    const icons = {\n      1: completed ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: checkmark,\n        alt: \"checked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: generalIcon,\n        alt: \"generalIcon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 69\n      }, this),\n      2: completed ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: checkmark,\n        alt: \"checked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: address,\n        alt: \"address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 69\n      }, this),\n      3: completed ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: checkmark,\n        alt: \"checked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: otherDetails,\n        alt: \"otherDetails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 69\n      }, this)\n    }; // change icons\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: clsx(classes.root, {\n        [classes.active]: active,\n        [classes.completed]: completed\n      }),\n      onClick: () => {\n        completed && handleBack(props.icon);\n      },\n      children: icons[String(props.icon)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s(ColorlibStepIcon, \"TbUAg343/d/fVF4s63V6GVaUi8k=\", false, function () {\n    return [useColorlibStepIconStyles];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      className: stepsStyles.stepHeader,\n      alternativeLabel: true,\n      activeStep: activeStep,\n      connector: /*#__PURE__*/_jsxDEV(ColorlibConnector, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }, this),\n      children: stepTitles.map(label => /*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          classes: {\n            label: classes.step_label_root\n          },\n          StepIconComponent: ColorlibStepIcon,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: stepsStyles.stepBody,\n      children: [activeStep === 0 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: firstStep\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this) : activeStep === 1 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: secondStep\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: thirdStep\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: stepsStyles.buttonsContainer,\n        children: /*#__PURE__*/_jsxDEV(CreateChancel, {\n          buttonWidth: \"224px\",\n          create: activeStep === stepTitles.length - 1 ? 'Add' : 'Next',\n          chancel: \"Cancel\",\n          onClose: handleClose,\n          onCreate: handleNext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Steps, \"5/ANSN4aidVPv0P4apAyeUUfwXQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = Steps;\n\nvar _c;\n\n$RefreshReg$(_c, \"Steps\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/components/steps/steps.js"],"names":["React","clsx","Stepper","Step","StepLabel","stepStyles","useStyles","useColorlibStepIconStyles","ColorlibConnector","CreateChancel","Steps","stepTitles","handleClose","firstStep","secondStep","thirdStep","classes","stepsStyles","activeStep","setActiveStep","useState","handleNext","length","prevActiveStep","alert","handleBack","step","ColorlibStepIcon","props","active","completed","icons","checkmark","generalIcon","address","otherDetails","root","icon","String","stepHeader","map","label","step_label_root","stepBody","buttonsContainer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport generalIcon from '@eachbase/assets/images/icons/generalInfo.svg';\nimport address from '@eachbase/assets/images/icons/address.svg';\nimport otherDetails from '@eachbase/assets/images/icons/otherDetails.svg';\nimport {stepStyles, useStyles, useColorlibStepIconStyles, ColorlibConnector} from \"./styles\";\nimport checkmark from \"@eachbase/assets/images/icons/checkmark.svg\";\nimport {CreateChancel} from \"@eachbase/components\";\n\nexport const Steps = ({stepTitles, handleClose, firstStep, secondStep, thirdStep}) => {\n\n    const classes = useStyles();\n    const stepsStyles = stepStyles()\n    const [activeStep, setActiveStep] = React.useState(0);\n\n    const handleNext = () => {\n        if (activeStep !== stepTitles.length - 1) {\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        } else {\n            alert('send request')\n        }\n    };\n\n    const handleBack = (step) => {\n        setActiveStep(step - 1);\n    };\n\n    function ColorlibStepIcon(props) {\n        const classes = useColorlibStepIconStyles();\n        const {active, completed} = props;\n\n        const icons = {\n            1: completed ? <img src={checkmark} alt={\"checked\"}/> : <img src={generalIcon} alt={\"generalIcon\"}/>,\n            2: completed ? <img src={checkmark} alt={\"checked\"}/> : <img src={address} alt={\"address\"}/>,\n            3: completed ? <img src={checkmark} alt={\"checked\"}/> : <img src={otherDetails} alt={\"otherDetails\"}/>,\n        };\n        // change icons\n\n        return (\n            <div\n                className={clsx(classes.root, {\n                    [classes.active]: active,\n                    [classes.completed]: completed,\n                })}\n                onClick={() => {\n                    completed && handleBack(props.icon)\n                }\n                }\n            >\n                {icons[String(props.icon)]}\n            </div>\n\n        );\n\n    }\n\n    return (\n        <div className={classes.root}>\n            <Stepper className={stepsStyles.stepHeader} alternativeLabel activeStep={activeStep}\n                     connector={<ColorlibConnector/>}>\n                {stepTitles.map((label) => (\n                    <Step key={label}>\n                        <StepLabel classes={{label: classes.step_label_root}} StepIconComponent={ColorlibStepIcon}>\n                            {label}\n                        </StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n            <div className={stepsStyles.stepBody}>\n                {activeStep === 0 ?\n                    <React.Fragment>{firstStep}</React.Fragment> : activeStep === 1 ?\n                        <React.Fragment>{secondStep}</React.Fragment> :\n                        <React.Fragment>{thirdStep}</React.Fragment>}\n                <div className={stepsStyles.buttonsContainer}>\n                    <CreateChancel\n                        buttonWidth='224px'\n                        create={activeStep === stepTitles.length - 1 ? 'Add' : 'Next'}\n                        chancel={\"Cancel\"}\n                        onClose={handleClose}\n                        onCreate={handleNext}\n                    />\n                </div>\n            </div>\n\n            {/*<CreateChancel  />*/}\n\n        </div>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}