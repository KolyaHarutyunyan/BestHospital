{"ast":null,"code":"var _jsxFileName = \"/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/fundingSource/officeInfo/core/addManagerModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { AddModalButton, CheckboxesTags, CloseButton, ValidationInput } from \"@eachbase/components\";\nimport { EmailValidator, ErrorText, globalModals, useGlobalStyles, useGlobalTextStyles } from '@eachbase/utils';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { roleActions } from \"@eachbase/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddManagerModal = ({\n  handleClose,\n  permissionsList\n}) => {\n  _s();\n\n  // const classes = managementFragments();\n  const globalModalsClasses = globalModals();\n  const globalText = useGlobalTextStyles();\n  const globalInputs = useGlobalStyles();\n  const [inputs, setInputs] = useState({});\n  const [error, setError] = useState('');\n  const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n\n  const addManager = () => {\n    console.log(inputs, 'inputs'); // const permissionsList = []\n    // for(let i of permissions){\n    //     permissionsList.push(i.id)\n    // }\n    //\n    // if(roleName && permissions) {\n    //     const body ={\n    //         \"title\": roleName,\n    //         \"description\": description,\n    //         \"permissions\": permissionsList,\n    //     }\n    //     dispatch(roleActions.createRole(body))\n    //     handleClose()\n    // }\n    // else if(!roleName){\n    //     setError('role')\n    // }\n    // else if(!permissions){\n    //     setError('permissions')\n    // }\n    // else if(!description){\n    //     setError('description')\n    // }\n  }; // const handleChange =(ev) =>{\n  //     setRoleName(ev)\n  //     if(error === 'role') setError('')\n  // }\n\n\n  const handleChange = e => setInputs(prevState => ({ ...prevState,\n    [e.target.name]: e.target.value\n  }), error === e.target.name && setError('') // e.target.name === 'firstName' && handleChangeFirstName(e.target.value),\n  // e.target.name === 'lastName' && handleChangeLastName(e.target.value),\n  );\n\n  const handleChangePhone = ev => {\n    if (ev.target.value.length <= 11) {\n      setPhone(ev.target.value);\n      error === 'phone' && setError('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: globalModalsClasses.smallModalWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: globalModalsClasses.smallModalClose,\n      children: /*#__PURE__*/_jsxDEV(CloseButton, {\n        handleCLic: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: globalModalsClasses.modalWrapperContent,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: globalText.modalTitle,\n        children: \"Want to Add Office Manager?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: globalText.modalText,\n        children: \"Please fulfill the below fields to add an Office Manager.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n        onChange: handleChange,\n        typeError: error === 'role' // style={classes.input}\n        ,\n        variant: \"outlined\",\n        name: \"name\",\n        label: \"Full Name*\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n        validator: EmailValidator,\n        variant: \"outlined\",\n        name: \"email\",\n        type: \"email\",\n        label: \"Email Address*\",\n        typeError: error === 'email' ? ErrorText.field : error === 'Not valid email' ? 'Not valid email' : '',\n        sendBoolean: bool => bool === true ? setError(\"Not valid email\") : setError(''),\n        onChange: handleChange,\n        value: inputs.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n        onChange: handleChange,\n        typeError: error === 'role' // style={classes.input}\n        ,\n        variant: \"outlined\",\n        name: \"name\",\n        label: \"Full Name*\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidationInput, {\n        variant: \"outlined\",\n        name: \"phone\",\n        label: \"Phone Number*\",\n        type: 'number',\n        typeError: error === 'phone' ? ErrorText.field : '',\n        onChange: handleChangePhone,\n        value: phone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddModalButton, {\n        styles: {\n          marginTop: '16px'\n        },\n        handleClick: addManager,\n        text: 'Add'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddManagerModal, \"UipeRUmZHqzQcvIKVPK6ykJxObg=\", false, function () {\n  return [useGlobalTextStyles, useGlobalStyles, useDispatch];\n});\n\n_c = AddManagerModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddManagerModal\");","map":{"version":3,"sources":["/Users/eachbase5/Desktop/untitled folder/wellnessDaisy/client/src/fragments/fundingSource/officeInfo/core/addManagerModal.js"],"names":["React","useState","AddModalButton","CheckboxesTags","CloseButton","ValidationInput","EmailValidator","ErrorText","globalModals","useGlobalStyles","useGlobalTextStyles","useDispatch","useSelector","roleActions","AddManagerModal","handleClose","permissionsList","globalModalsClasses","globalText","globalInputs","inputs","setInputs","error","setError","phone","setPhone","dispatch","addManager","console","log","handleChange","e","prevState","target","name","value","handleChangePhone","ev","length","smallModalWrapper","smallModalClose","modalWrapperContent","modalTitle","modalText","field","bool","email","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    AddModalButton,\n    CheckboxesTags,\n    CloseButton,\n    ValidationInput\n} from \"@eachbase/components\";\n\nimport {EmailValidator, ErrorText, globalModals, useGlobalStyles, useGlobalTextStyles} from '@eachbase/utils'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { roleActions } from \"@eachbase/store\";\n\nexport const AddManagerModal =({handleClose, permissionsList})=>{\n    // const classes = managementFragments();\n    const globalModalsClasses = globalModals();\n    const globalText = useGlobalTextStyles();\n    const globalInputs = useGlobalStyles()\n    const [inputs, setInputs] = useState({});\n    const [error, setError] = useState('')\n    const [phone, setPhone] = useState('')\n\n    const dispatch = useDispatch()\n\n\n    const addManager =()=>{\n\n        console.log(inputs,'inputs')\n        // const permissionsList = []\n        // for(let i of permissions){\n        //     permissionsList.push(i.id)\n        // }\n        //\n        // if(roleName && permissions) {\n        //     const body ={\n        //         \"title\": roleName,\n        //         \"description\": description,\n        //         \"permissions\": permissionsList,\n        //     }\n        //     dispatch(roleActions.createRole(body))\n        //     handleClose()\n        // }\n        // else if(!roleName){\n        //     setError('role')\n        // }\n        // else if(!permissions){\n        //     setError('permissions')\n        // }\n        // else if(!description){\n        //     setError('description')\n        // }\n    }\n\n    // const handleChange =(ev) =>{\n    //     setRoleName(ev)\n    //     if(error === 'role') setError('')\n    // }\n\n\n    const handleChange = e => setInputs(\n        prevState => ({...prevState, [e.target.name]: e.target.value}),\n        error === e.target.name && setError(''),\n        // e.target.name === 'firstName' && handleChangeFirstName(e.target.value),\n        // e.target.name === 'lastName' && handleChangeLastName(e.target.value),\n    );\n\n    const handleChangePhone = (ev) => {\n        if (ev.target.value.length <= 11) {\n            setPhone(ev.target.value)\n            error === 'phone' && setError('')\n        }\n    }\n\n    return(\n        <div className={globalModalsClasses.smallModalWrapper}>\n            <div className={globalModalsClasses.smallModalClose}>\n                <CloseButton handleCLic={handleClose}/>\n            </div>\n\n            <div className={globalModalsClasses.modalWrapperContent}>\n                <p className={globalText.modalTitle}>Want to Add Office Manager?</p>\n                <p className={globalText.modalText}>Please fulfill the below fields to add an Office Manager.</p>\n\n                <ValidationInput\n                    onChange={handleChange}\n                    typeError={error === 'role'}\n                    // style={classes.input}\n                    variant={\"outlined\"}\n                    name={\"name\"}\n                    label={\"Full Name*\"}\n                    type={\"text\"}\n                />\n                <ValidationInput\n                    validator={EmailValidator}\n                    variant={\"outlined\"}\n                    name={\"email\"}\n                    type={\"email\"}\n                    label={\"Email Address*\"}\n                    typeError={error === 'email' ? ErrorText.field : error === 'Not valid email' ? 'Not valid email' : ''}\n                    sendBoolean={(bool) => bool === true ? setError(\"Not valid email\") : setError('')}\n                    onChange={handleChange}\n                    value={inputs.email}\n                />\n\n                <ValidationInput\n                    onChange={handleChange}\n                    typeError={error === 'role'}\n                    // style={classes.input}\n                    variant={\"outlined\"}\n                    name={\"name\"}\n                    label={\"Full Name*\"}\n                    type={\"text\"}\n                />\n\n\n                <ValidationInput\n                    variant={\"outlined\"}\n                    name={\"phone\"}\n                    label={\"Phone Number*\"}\n                    type={'number'}\n                    typeError={ error === 'phone' ? ErrorText.field : ''}\n                    onChange={ handleChangePhone }\n                    value={ phone }\n                />\n\n\n                <AddModalButton styles={{marginTop:'16px'}} handleClick={addManager} text={'Add'} />\n\n            </div>\n\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}